// Code generated by mocktail; DO NOT EDIT.

package peabucket

import (
	"context"
	"testing"
	"time"

	"github.com/nats-io/nats.go/jetstream"
	"github.com/stretchr/testify/mock"
)

// bucketMock mock of bucket.
type bucketMock struct{ mock.Mock }

// newBucketMock creates a new bucketMock.
func newBucketMock(tb testing.TB) *bucketMock {
	tb.Helper()

	m := &bucketMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *bucketMock) Bucket() string {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() string); ok {
		return _rf()
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *bucketMock) OnBucket() *bucketBucketCall {
	return &bucketBucketCall{Call: _m.Mock.On("Bucket"), Parent: _m}
}

func (_m *bucketMock) OnBucketRaw() *bucketBucketCall {
	return &bucketBucketCall{Call: _m.Mock.On("Bucket"), Parent: _m}
}

type bucketBucketCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketBucketCall) Panic(msg string) *bucketBucketCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketBucketCall) Once() *bucketBucketCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketBucketCall) Twice() *bucketBucketCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketBucketCall) Times(i int) *bucketBucketCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketBucketCall) WaitUntil(w <-chan time.Time) *bucketBucketCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketBucketCall) After(d time.Duration) *bucketBucketCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketBucketCall) Run(fn func(args mock.Arguments)) *bucketBucketCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketBucketCall) Maybe() *bucketBucketCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketBucketCall) TypedReturns(a string) *bucketBucketCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *bucketBucketCall) ReturnsFn(fn func() string) *bucketBucketCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketBucketCall) TypedRun(fn func()) *bucketBucketCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *bucketBucketCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketBucketCall) OnCreate(key string, value []byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketBucketCall) OnDelete(key string, opts []jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketBucketCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketBucketCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketBucketCall) OnHistory(key string, opts []jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketBucketCall) OnKeys(opts []jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketBucketCall) OnListKeys(opts []jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketBucketCall) OnListKeysFiltered(filters []string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketBucketCall) OnPurge(key string, opts []jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketBucketCall) OnPurgeDeletes(opts []jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketBucketCall) OnPut(key string, value []byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketBucketCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketBucketCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketBucketCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketBucketCall) OnWatch(keys string, opts []jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketBucketCall) OnWatchAll(opts []jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketBucketCall) OnWatchFiltered(keys []string, opts []jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketBucketCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketBucketCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketBucketCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketBucketCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketBucketCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketBucketCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketBucketCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketBucketCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketBucketCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketBucketCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketBucketCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketBucketCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketBucketCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketBucketCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketBucketCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketBucketCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketBucketCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketBucketCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) Create(_ context.Context, key string, value []byte) (uint64, error) {
	_ret := _m.Called(key, value)

	if _rf, ok := _ret.Get(0).(func(string, []byte) (uint64, error)); ok {
		return _rf(key, value)
	}

	_ra0, _ := _ret.Get(0).(uint64)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *bucketMock) OnCreate(key string, value []byte) *bucketCreateCall {
	return &bucketCreateCall{Call: _m.Mock.On("Create", key, value), Parent: _m}
}

func (_m *bucketMock) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return &bucketCreateCall{Call: _m.Mock.On("Create", key, value), Parent: _m}
}

type bucketCreateCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketCreateCall) Panic(msg string) *bucketCreateCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketCreateCall) Once() *bucketCreateCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketCreateCall) Twice() *bucketCreateCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketCreateCall) Times(i int) *bucketCreateCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketCreateCall) WaitUntil(w <-chan time.Time) *bucketCreateCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketCreateCall) After(d time.Duration) *bucketCreateCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketCreateCall) Run(fn func(args mock.Arguments)) *bucketCreateCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketCreateCall) Maybe() *bucketCreateCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketCreateCall) TypedReturns(a uint64, b error) *bucketCreateCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *bucketCreateCall) ReturnsFn(fn func(string, []byte) (uint64, error)) *bucketCreateCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketCreateCall) TypedRun(fn func(string, []byte)) *bucketCreateCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_key := args.String(0)
		_value, _ := args.Get(1).([]byte)
		fn(_key, _value)
	})
	return _c
}

func (_c *bucketCreateCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketCreateCall) OnCreate(key string, value []byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketCreateCall) OnDelete(key string, opts []jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketCreateCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketCreateCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketCreateCall) OnHistory(key string, opts []jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketCreateCall) OnKeys(opts []jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketCreateCall) OnListKeys(opts []jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketCreateCall) OnListKeysFiltered(filters []string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketCreateCall) OnPurge(key string, opts []jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketCreateCall) OnPurgeDeletes(opts []jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketCreateCall) OnPut(key string, value []byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketCreateCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketCreateCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketCreateCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketCreateCall) OnWatch(keys string, opts []jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketCreateCall) OnWatchAll(opts []jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketCreateCall) OnWatchFiltered(keys []string, opts []jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketCreateCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketCreateCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketCreateCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketCreateCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketCreateCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketCreateCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketCreateCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketCreateCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketCreateCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketCreateCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketCreateCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketCreateCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketCreateCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketCreateCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketCreateCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketCreateCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketCreateCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketCreateCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) Delete(_ context.Context, key string, opts ...jetstream.KVDeleteOpt) error {
	_ret := _m.Called(key, opts)

	if _rf, ok := _ret.Get(0).(func(string, ...jetstream.KVDeleteOpt) error); ok {
		return _rf(key, opts...)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *bucketMock) OnDelete(key string, opts ...jetstream.KVDeleteOpt) *bucketDeleteCall {
	return &bucketDeleteCall{Call: _m.Mock.On("Delete", key, opts), Parent: _m}
}

func (_m *bucketMock) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return &bucketDeleteCall{Call: _m.Mock.On("Delete", key, opts), Parent: _m}
}

type bucketDeleteCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketDeleteCall) Panic(msg string) *bucketDeleteCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketDeleteCall) Once() *bucketDeleteCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketDeleteCall) Twice() *bucketDeleteCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketDeleteCall) Times(i int) *bucketDeleteCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketDeleteCall) WaitUntil(w <-chan time.Time) *bucketDeleteCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketDeleteCall) After(d time.Duration) *bucketDeleteCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketDeleteCall) Run(fn func(args mock.Arguments)) *bucketDeleteCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketDeleteCall) Maybe() *bucketDeleteCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketDeleteCall) TypedReturns(a error) *bucketDeleteCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *bucketDeleteCall) ReturnsFn(fn func(string, ...jetstream.KVDeleteOpt) error) *bucketDeleteCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketDeleteCall) TypedRun(fn func(string, ...jetstream.KVDeleteOpt)) *bucketDeleteCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_key := args.String(0)
		_opts, _ := args.Get(1).([]jetstream.KVDeleteOpt)
		fn(_key, _opts...)
	})
	return _c
}

func (_c *bucketDeleteCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketDeleteCall) OnCreate(key string, value ...byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketDeleteCall) OnDelete(key string, opts ...jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketDeleteCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketDeleteCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketDeleteCall) OnHistory(key string, opts ...jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketDeleteCall) OnKeys(opts ...jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketDeleteCall) OnListKeys(opts ...jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketDeleteCall) OnListKeysFiltered(filters ...string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketDeleteCall) OnPurge(key string, opts ...jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketDeleteCall) OnPurgeDeletes(opts ...jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketDeleteCall) OnPut(key string, value ...byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketDeleteCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketDeleteCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketDeleteCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketDeleteCall) OnWatch(keys string, opts ...jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketDeleteCall) OnWatchAll(opts ...jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketDeleteCall) OnWatchFiltered(keys []string, opts ...jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketDeleteCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketDeleteCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketDeleteCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketDeleteCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketDeleteCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketDeleteCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketDeleteCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketDeleteCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketDeleteCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketDeleteCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketDeleteCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketDeleteCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketDeleteCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketDeleteCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketDeleteCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketDeleteCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketDeleteCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketDeleteCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) Get(_ context.Context, key string) (jetstream.KeyValueEntry, error) {
	_ret := _m.Called(key)

	if _rf, ok := _ret.Get(0).(func(string) (jetstream.KeyValueEntry, error)); ok {
		return _rf(key)
	}

	_ra0, _ := _ret.Get(0).(jetstream.KeyValueEntry)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *bucketMock) OnGet(key string) *bucketGetCall {
	return &bucketGetCall{Call: _m.Mock.On("Get", key), Parent: _m}
}

func (_m *bucketMock) OnGetRaw(key interface{}) *bucketGetCall {
	return &bucketGetCall{Call: _m.Mock.On("Get", key), Parent: _m}
}

type bucketGetCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketGetCall) Panic(msg string) *bucketGetCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketGetCall) Once() *bucketGetCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketGetCall) Twice() *bucketGetCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketGetCall) Times(i int) *bucketGetCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketGetCall) WaitUntil(w <-chan time.Time) *bucketGetCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketGetCall) After(d time.Duration) *bucketGetCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketGetCall) Run(fn func(args mock.Arguments)) *bucketGetCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketGetCall) Maybe() *bucketGetCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketGetCall) TypedReturns(a jetstream.KeyValueEntry, b error) *bucketGetCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *bucketGetCall) ReturnsFn(fn func(string) (jetstream.KeyValueEntry, error)) *bucketGetCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketGetCall) TypedRun(fn func(string)) *bucketGetCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_key := args.String(0)
		fn(_key)
	})
	return _c
}

func (_c *bucketGetCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketGetCall) OnCreate(key string, value []byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketGetCall) OnDelete(key string, opts []jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketGetCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketGetCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketGetCall) OnHistory(key string, opts []jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketGetCall) OnKeys(opts []jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketGetCall) OnListKeys(opts []jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketGetCall) OnListKeysFiltered(filters []string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketGetCall) OnPurge(key string, opts []jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketGetCall) OnPurgeDeletes(opts []jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketGetCall) OnPut(key string, value []byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketGetCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketGetCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketGetCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketGetCall) OnWatch(keys string, opts []jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketGetCall) OnWatchAll(opts []jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketGetCall) OnWatchFiltered(keys []string, opts []jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketGetCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketGetCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketGetCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketGetCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketGetCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketGetCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketGetCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketGetCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketGetCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketGetCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketGetCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketGetCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketGetCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketGetCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketGetCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketGetCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketGetCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketGetCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) GetRevision(_ context.Context, key string, revision uint64) (jetstream.KeyValueEntry, error) {
	_ret := _m.Called(key, revision)

	if _rf, ok := _ret.Get(0).(func(string, uint64) (jetstream.KeyValueEntry, error)); ok {
		return _rf(key, revision)
	}

	_ra0, _ := _ret.Get(0).(jetstream.KeyValueEntry)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *bucketMock) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return &bucketGetRevisionCall{Call: _m.Mock.On("GetRevision", key, revision), Parent: _m}
}

func (_m *bucketMock) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return &bucketGetRevisionCall{Call: _m.Mock.On("GetRevision", key, revision), Parent: _m}
}

type bucketGetRevisionCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketGetRevisionCall) Panic(msg string) *bucketGetRevisionCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketGetRevisionCall) Once() *bucketGetRevisionCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketGetRevisionCall) Twice() *bucketGetRevisionCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketGetRevisionCall) Times(i int) *bucketGetRevisionCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketGetRevisionCall) WaitUntil(w <-chan time.Time) *bucketGetRevisionCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketGetRevisionCall) After(d time.Duration) *bucketGetRevisionCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketGetRevisionCall) Run(fn func(args mock.Arguments)) *bucketGetRevisionCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketGetRevisionCall) Maybe() *bucketGetRevisionCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketGetRevisionCall) TypedReturns(a jetstream.KeyValueEntry, b error) *bucketGetRevisionCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *bucketGetRevisionCall) ReturnsFn(fn func(string, uint64) (jetstream.KeyValueEntry, error)) *bucketGetRevisionCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketGetRevisionCall) TypedRun(fn func(string, uint64)) *bucketGetRevisionCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_key := args.String(0)
		_revision, _ := args.Get(1).(uint64)
		fn(_key, _revision)
	})
	return _c
}

func (_c *bucketGetRevisionCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketGetRevisionCall) OnCreate(key string, value []byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketGetRevisionCall) OnDelete(key string, opts []jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketGetRevisionCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketGetRevisionCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketGetRevisionCall) OnHistory(key string, opts []jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketGetRevisionCall) OnKeys(opts []jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketGetRevisionCall) OnListKeys(opts []jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketGetRevisionCall) OnListKeysFiltered(filters []string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketGetRevisionCall) OnPurge(key string, opts []jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketGetRevisionCall) OnPurgeDeletes(opts []jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketGetRevisionCall) OnPut(key string, value []byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketGetRevisionCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketGetRevisionCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketGetRevisionCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketGetRevisionCall) OnWatch(keys string, opts []jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketGetRevisionCall) OnWatchAll(opts []jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketGetRevisionCall) OnWatchFiltered(keys []string, opts []jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketGetRevisionCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketGetRevisionCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketGetRevisionCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketGetRevisionCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketGetRevisionCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketGetRevisionCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketGetRevisionCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketGetRevisionCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketGetRevisionCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketGetRevisionCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketGetRevisionCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketGetRevisionCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketGetRevisionCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketGetRevisionCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketGetRevisionCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketGetRevisionCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketGetRevisionCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketGetRevisionCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) History(_ context.Context, key string, opts ...jetstream.WatchOpt) ([]jetstream.KeyValueEntry, error) {
	_ret := _m.Called(key, opts)

	if _rf, ok := _ret.Get(0).(func(string, ...jetstream.WatchOpt) ([]jetstream.KeyValueEntry, error)); ok {
		return _rf(key, opts...)
	}

	_ra0, _ := _ret.Get(0).([]jetstream.KeyValueEntry)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *bucketMock) OnHistory(key string, opts ...jetstream.WatchOpt) *bucketHistoryCall {
	return &bucketHistoryCall{Call: _m.Mock.On("History", key, opts), Parent: _m}
}

func (_m *bucketMock) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return &bucketHistoryCall{Call: _m.Mock.On("History", key, opts), Parent: _m}
}

type bucketHistoryCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketHistoryCall) Panic(msg string) *bucketHistoryCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketHistoryCall) Once() *bucketHistoryCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketHistoryCall) Twice() *bucketHistoryCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketHistoryCall) Times(i int) *bucketHistoryCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketHistoryCall) WaitUntil(w <-chan time.Time) *bucketHistoryCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketHistoryCall) After(d time.Duration) *bucketHistoryCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketHistoryCall) Run(fn func(args mock.Arguments)) *bucketHistoryCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketHistoryCall) Maybe() *bucketHistoryCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketHistoryCall) TypedReturns(a []jetstream.KeyValueEntry, b error) *bucketHistoryCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *bucketHistoryCall) ReturnsFn(fn func(string, ...jetstream.WatchOpt) ([]jetstream.KeyValueEntry, error)) *bucketHistoryCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketHistoryCall) TypedRun(fn func(string, ...jetstream.WatchOpt)) *bucketHistoryCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_key := args.String(0)
		_opts, _ := args.Get(1).([]jetstream.WatchOpt)
		fn(_key, _opts...)
	})
	return _c
}

func (_c *bucketHistoryCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketHistoryCall) OnCreate(key string, value ...byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketHistoryCall) OnDelete(key string, opts ...jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketHistoryCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketHistoryCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketHistoryCall) OnHistory(key string, opts ...jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketHistoryCall) OnKeys(opts ...jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketHistoryCall) OnListKeys(opts ...jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketHistoryCall) OnListKeysFiltered(filters ...string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketHistoryCall) OnPurge(key string, opts ...jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketHistoryCall) OnPurgeDeletes(opts ...jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketHistoryCall) OnPut(key string, value ...byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketHistoryCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketHistoryCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketHistoryCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketHistoryCall) OnWatch(keys string, opts ...jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketHistoryCall) OnWatchAll(opts ...jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketHistoryCall) OnWatchFiltered(keys []string, opts ...jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketHistoryCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketHistoryCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketHistoryCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketHistoryCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketHistoryCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketHistoryCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketHistoryCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketHistoryCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketHistoryCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketHistoryCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketHistoryCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketHistoryCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketHistoryCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketHistoryCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketHistoryCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketHistoryCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketHistoryCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketHistoryCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) Keys(_ context.Context, opts ...jetstream.WatchOpt) ([]string, error) {
	_ret := _m.Called(opts)

	if _rf, ok := _ret.Get(0).(func(...jetstream.WatchOpt) ([]string, error)); ok {
		return _rf(opts...)
	}

	_ra0, _ := _ret.Get(0).([]string)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *bucketMock) OnKeys(opts ...jetstream.WatchOpt) *bucketKeysCall {
	return &bucketKeysCall{Call: _m.Mock.On("Keys", opts), Parent: _m}
}

func (_m *bucketMock) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return &bucketKeysCall{Call: _m.Mock.On("Keys", opts), Parent: _m}
}

type bucketKeysCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketKeysCall) Panic(msg string) *bucketKeysCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketKeysCall) Once() *bucketKeysCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketKeysCall) Twice() *bucketKeysCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketKeysCall) Times(i int) *bucketKeysCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketKeysCall) WaitUntil(w <-chan time.Time) *bucketKeysCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketKeysCall) After(d time.Duration) *bucketKeysCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketKeysCall) Run(fn func(args mock.Arguments)) *bucketKeysCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketKeysCall) Maybe() *bucketKeysCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketKeysCall) TypedReturns(a []string, b error) *bucketKeysCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *bucketKeysCall) ReturnsFn(fn func(...jetstream.WatchOpt) ([]string, error)) *bucketKeysCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketKeysCall) TypedRun(fn func(...jetstream.WatchOpt)) *bucketKeysCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_opts, _ := args.Get(0).([]jetstream.WatchOpt)
		fn(_opts...)
	})
	return _c
}

func (_c *bucketKeysCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketKeysCall) OnCreate(key string, value ...byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketKeysCall) OnDelete(key string, opts ...jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketKeysCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketKeysCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketKeysCall) OnHistory(key string, opts ...jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketKeysCall) OnKeys(opts ...jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketKeysCall) OnListKeys(opts ...jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketKeysCall) OnListKeysFiltered(filters ...string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketKeysCall) OnPurge(key string, opts ...jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketKeysCall) OnPurgeDeletes(opts ...jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketKeysCall) OnPut(key string, value ...byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketKeysCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketKeysCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketKeysCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketKeysCall) OnWatch(keys string, opts ...jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketKeysCall) OnWatchAll(opts ...jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketKeysCall) OnWatchFiltered(keys []string, opts ...jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketKeysCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketKeysCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketKeysCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketKeysCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketKeysCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketKeysCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketKeysCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketKeysCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketKeysCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketKeysCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketKeysCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketKeysCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketKeysCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketKeysCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketKeysCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketKeysCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketKeysCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketKeysCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) ListKeys(_ context.Context, opts ...jetstream.WatchOpt) (jetstream.KeyLister, error) {
	_ret := _m.Called(opts)

	if _rf, ok := _ret.Get(0).(func(...jetstream.WatchOpt) (jetstream.KeyLister, error)); ok {
		return _rf(opts...)
	}

	_ra0, _ := _ret.Get(0).(jetstream.KeyLister)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *bucketMock) OnListKeys(opts ...jetstream.WatchOpt) *bucketListKeysCall {
	return &bucketListKeysCall{Call: _m.Mock.On("ListKeys", opts), Parent: _m}
}

func (_m *bucketMock) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return &bucketListKeysCall{Call: _m.Mock.On("ListKeys", opts), Parent: _m}
}

type bucketListKeysCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketListKeysCall) Panic(msg string) *bucketListKeysCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketListKeysCall) Once() *bucketListKeysCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketListKeysCall) Twice() *bucketListKeysCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketListKeysCall) Times(i int) *bucketListKeysCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketListKeysCall) WaitUntil(w <-chan time.Time) *bucketListKeysCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketListKeysCall) After(d time.Duration) *bucketListKeysCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketListKeysCall) Run(fn func(args mock.Arguments)) *bucketListKeysCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketListKeysCall) Maybe() *bucketListKeysCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketListKeysCall) TypedReturns(a jetstream.KeyLister, b error) *bucketListKeysCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *bucketListKeysCall) ReturnsFn(fn func(...jetstream.WatchOpt) (jetstream.KeyLister, error)) *bucketListKeysCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketListKeysCall) TypedRun(fn func(...jetstream.WatchOpt)) *bucketListKeysCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_opts, _ := args.Get(0).([]jetstream.WatchOpt)
		fn(_opts...)
	})
	return _c
}

func (_c *bucketListKeysCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketListKeysCall) OnCreate(key string, value ...byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketListKeysCall) OnDelete(key string, opts ...jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketListKeysCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketListKeysCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketListKeysCall) OnHistory(key string, opts ...jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketListKeysCall) OnKeys(opts ...jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketListKeysCall) OnListKeys(opts ...jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketListKeysCall) OnListKeysFiltered(filters ...string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketListKeysCall) OnPurge(key string, opts ...jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketListKeysCall) OnPurgeDeletes(opts ...jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketListKeysCall) OnPut(key string, value ...byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketListKeysCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketListKeysCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketListKeysCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketListKeysCall) OnWatch(keys string, opts ...jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketListKeysCall) OnWatchAll(opts ...jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketListKeysCall) OnWatchFiltered(keys []string, opts ...jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketListKeysCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketListKeysCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketListKeysCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketListKeysCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketListKeysCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketListKeysCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketListKeysCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketListKeysCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketListKeysCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketListKeysCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketListKeysCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketListKeysCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketListKeysCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketListKeysCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketListKeysCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketListKeysCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketListKeysCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketListKeysCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) ListKeysFiltered(_ context.Context, filters ...string) (jetstream.KeyLister, error) {
	_ret := _m.Called(filters)

	if _rf, ok := _ret.Get(0).(func(...string) (jetstream.KeyLister, error)); ok {
		return _rf(filters...)
	}

	_ra0, _ := _ret.Get(0).(jetstream.KeyLister)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *bucketMock) OnListKeysFiltered(filters ...string) *bucketListKeysFilteredCall {
	return &bucketListKeysFilteredCall{Call: _m.Mock.On("ListKeysFiltered", filters), Parent: _m}
}

func (_m *bucketMock) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return &bucketListKeysFilteredCall{Call: _m.Mock.On("ListKeysFiltered", filters), Parent: _m}
}

type bucketListKeysFilteredCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketListKeysFilteredCall) Panic(msg string) *bucketListKeysFilteredCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketListKeysFilteredCall) Once() *bucketListKeysFilteredCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketListKeysFilteredCall) Twice() *bucketListKeysFilteredCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketListKeysFilteredCall) Times(i int) *bucketListKeysFilteredCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketListKeysFilteredCall) WaitUntil(w <-chan time.Time) *bucketListKeysFilteredCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketListKeysFilteredCall) After(d time.Duration) *bucketListKeysFilteredCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketListKeysFilteredCall) Run(fn func(args mock.Arguments)) *bucketListKeysFilteredCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketListKeysFilteredCall) Maybe() *bucketListKeysFilteredCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketListKeysFilteredCall) TypedReturns(a jetstream.KeyLister, b error) *bucketListKeysFilteredCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *bucketListKeysFilteredCall) ReturnsFn(fn func(...string) (jetstream.KeyLister, error)) *bucketListKeysFilteredCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketListKeysFilteredCall) TypedRun(fn func(...string)) *bucketListKeysFilteredCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_filters, _ := args.Get(0).([]string)
		fn(_filters...)
	})
	return _c
}

func (_c *bucketListKeysFilteredCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketListKeysFilteredCall) OnCreate(key string, value ...byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketListKeysFilteredCall) OnDelete(key string, opts ...jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketListKeysFilteredCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketListKeysFilteredCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketListKeysFilteredCall) OnHistory(key string, opts ...jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketListKeysFilteredCall) OnKeys(opts ...jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketListKeysFilteredCall) OnListKeys(opts ...jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketListKeysFilteredCall) OnListKeysFiltered(filters ...string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketListKeysFilteredCall) OnPurge(key string, opts ...jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketListKeysFilteredCall) OnPurgeDeletes(opts ...jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketListKeysFilteredCall) OnPut(key string, value ...byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketListKeysFilteredCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketListKeysFilteredCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketListKeysFilteredCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketListKeysFilteredCall) OnWatch(keys string, opts ...jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketListKeysFilteredCall) OnWatchAll(opts ...jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketListKeysFilteredCall) OnWatchFiltered(keys []string, opts ...jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketListKeysFilteredCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketListKeysFilteredCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketListKeysFilteredCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketListKeysFilteredCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketListKeysFilteredCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketListKeysFilteredCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketListKeysFilteredCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketListKeysFilteredCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketListKeysFilteredCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketListKeysFilteredCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketListKeysFilteredCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketListKeysFilteredCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketListKeysFilteredCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketListKeysFilteredCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketListKeysFilteredCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketListKeysFilteredCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketListKeysFilteredCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketListKeysFilteredCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) Purge(_ context.Context, key string, opts ...jetstream.KVDeleteOpt) error {
	_ret := _m.Called(key, opts)

	if _rf, ok := _ret.Get(0).(func(string, ...jetstream.KVDeleteOpt) error); ok {
		return _rf(key, opts...)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *bucketMock) OnPurge(key string, opts ...jetstream.KVDeleteOpt) *bucketPurgeCall {
	return &bucketPurgeCall{Call: _m.Mock.On("Purge", key, opts), Parent: _m}
}

func (_m *bucketMock) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return &bucketPurgeCall{Call: _m.Mock.On("Purge", key, opts), Parent: _m}
}

type bucketPurgeCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketPurgeCall) Panic(msg string) *bucketPurgeCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketPurgeCall) Once() *bucketPurgeCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketPurgeCall) Twice() *bucketPurgeCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketPurgeCall) Times(i int) *bucketPurgeCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketPurgeCall) WaitUntil(w <-chan time.Time) *bucketPurgeCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketPurgeCall) After(d time.Duration) *bucketPurgeCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketPurgeCall) Run(fn func(args mock.Arguments)) *bucketPurgeCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketPurgeCall) Maybe() *bucketPurgeCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketPurgeCall) TypedReturns(a error) *bucketPurgeCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *bucketPurgeCall) ReturnsFn(fn func(string, ...jetstream.KVDeleteOpt) error) *bucketPurgeCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketPurgeCall) TypedRun(fn func(string, ...jetstream.KVDeleteOpt)) *bucketPurgeCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_key := args.String(0)
		_opts, _ := args.Get(1).([]jetstream.KVDeleteOpt)
		fn(_key, _opts...)
	})
	return _c
}

func (_c *bucketPurgeCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketPurgeCall) OnCreate(key string, value ...byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketPurgeCall) OnDelete(key string, opts ...jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketPurgeCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketPurgeCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketPurgeCall) OnHistory(key string, opts ...jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketPurgeCall) OnKeys(opts ...jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketPurgeCall) OnListKeys(opts ...jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketPurgeCall) OnListKeysFiltered(filters ...string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketPurgeCall) OnPurge(key string, opts ...jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketPurgeCall) OnPurgeDeletes(opts ...jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketPurgeCall) OnPut(key string, value ...byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketPurgeCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketPurgeCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketPurgeCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketPurgeCall) OnWatch(keys string, opts ...jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketPurgeCall) OnWatchAll(opts ...jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketPurgeCall) OnWatchFiltered(keys []string, opts ...jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketPurgeCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketPurgeCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketPurgeCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketPurgeCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketPurgeCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketPurgeCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketPurgeCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketPurgeCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketPurgeCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketPurgeCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketPurgeCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketPurgeCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketPurgeCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketPurgeCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketPurgeCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketPurgeCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketPurgeCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketPurgeCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) PurgeDeletes(_ context.Context, opts ...jetstream.KVPurgeOpt) error {
	_ret := _m.Called(opts)

	if _rf, ok := _ret.Get(0).(func(...jetstream.KVPurgeOpt) error); ok {
		return _rf(opts...)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *bucketMock) OnPurgeDeletes(opts ...jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return &bucketPurgeDeletesCall{Call: _m.Mock.On("PurgeDeletes", opts), Parent: _m}
}

func (_m *bucketMock) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return &bucketPurgeDeletesCall{Call: _m.Mock.On("PurgeDeletes", opts), Parent: _m}
}

type bucketPurgeDeletesCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketPurgeDeletesCall) Panic(msg string) *bucketPurgeDeletesCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketPurgeDeletesCall) Once() *bucketPurgeDeletesCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketPurgeDeletesCall) Twice() *bucketPurgeDeletesCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketPurgeDeletesCall) Times(i int) *bucketPurgeDeletesCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketPurgeDeletesCall) WaitUntil(w <-chan time.Time) *bucketPurgeDeletesCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketPurgeDeletesCall) After(d time.Duration) *bucketPurgeDeletesCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketPurgeDeletesCall) Run(fn func(args mock.Arguments)) *bucketPurgeDeletesCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketPurgeDeletesCall) Maybe() *bucketPurgeDeletesCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketPurgeDeletesCall) TypedReturns(a error) *bucketPurgeDeletesCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *bucketPurgeDeletesCall) ReturnsFn(fn func(...jetstream.KVPurgeOpt) error) *bucketPurgeDeletesCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketPurgeDeletesCall) TypedRun(fn func(...jetstream.KVPurgeOpt)) *bucketPurgeDeletesCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_opts, _ := args.Get(0).([]jetstream.KVPurgeOpt)
		fn(_opts...)
	})
	return _c
}

func (_c *bucketPurgeDeletesCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketPurgeDeletesCall) OnCreate(key string, value ...byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketPurgeDeletesCall) OnDelete(key string, opts ...jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketPurgeDeletesCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketPurgeDeletesCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketPurgeDeletesCall) OnHistory(key string, opts ...jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketPurgeDeletesCall) OnKeys(opts ...jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketPurgeDeletesCall) OnListKeys(opts ...jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketPurgeDeletesCall) OnListKeysFiltered(filters ...string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketPurgeDeletesCall) OnPurge(key string, opts ...jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketPurgeDeletesCall) OnPurgeDeletes(opts ...jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketPurgeDeletesCall) OnPut(key string, value ...byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketPurgeDeletesCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketPurgeDeletesCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketPurgeDeletesCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketPurgeDeletesCall) OnWatch(keys string, opts ...jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketPurgeDeletesCall) OnWatchAll(opts ...jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketPurgeDeletesCall) OnWatchFiltered(keys []string, opts ...jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketPurgeDeletesCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketPurgeDeletesCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketPurgeDeletesCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketPurgeDeletesCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketPurgeDeletesCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketPurgeDeletesCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketPurgeDeletesCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketPurgeDeletesCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketPurgeDeletesCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketPurgeDeletesCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketPurgeDeletesCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketPurgeDeletesCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketPurgeDeletesCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketPurgeDeletesCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketPurgeDeletesCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketPurgeDeletesCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketPurgeDeletesCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketPurgeDeletesCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) Put(_ context.Context, key string, value []byte) (uint64, error) {
	_ret := _m.Called(key, value)

	if _rf, ok := _ret.Get(0).(func(string, []byte) (uint64, error)); ok {
		return _rf(key, value)
	}

	_ra0, _ := _ret.Get(0).(uint64)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *bucketMock) OnPut(key string, value []byte) *bucketPutCall {
	return &bucketPutCall{Call: _m.Mock.On("Put", key, value), Parent: _m}
}

func (_m *bucketMock) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return &bucketPutCall{Call: _m.Mock.On("Put", key, value), Parent: _m}
}

type bucketPutCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketPutCall) Panic(msg string) *bucketPutCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketPutCall) Once() *bucketPutCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketPutCall) Twice() *bucketPutCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketPutCall) Times(i int) *bucketPutCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketPutCall) WaitUntil(w <-chan time.Time) *bucketPutCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketPutCall) After(d time.Duration) *bucketPutCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketPutCall) Run(fn func(args mock.Arguments)) *bucketPutCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketPutCall) Maybe() *bucketPutCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketPutCall) TypedReturns(a uint64, b error) *bucketPutCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *bucketPutCall) ReturnsFn(fn func(string, []byte) (uint64, error)) *bucketPutCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketPutCall) TypedRun(fn func(string, []byte)) *bucketPutCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_key := args.String(0)
		_value, _ := args.Get(1).([]byte)
		fn(_key, _value)
	})
	return _c
}

func (_c *bucketPutCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketPutCall) OnCreate(key string, value []byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketPutCall) OnDelete(key string, opts []jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketPutCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketPutCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketPutCall) OnHistory(key string, opts []jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketPutCall) OnKeys(opts []jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketPutCall) OnListKeys(opts []jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketPutCall) OnListKeysFiltered(filters []string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketPutCall) OnPurge(key string, opts []jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketPutCall) OnPurgeDeletes(opts []jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketPutCall) OnPut(key string, value []byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketPutCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketPutCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketPutCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketPutCall) OnWatch(keys string, opts []jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketPutCall) OnWatchAll(opts []jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketPutCall) OnWatchFiltered(keys []string, opts []jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketPutCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketPutCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketPutCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketPutCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketPutCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketPutCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketPutCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketPutCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketPutCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketPutCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketPutCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketPutCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketPutCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketPutCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketPutCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketPutCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketPutCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketPutCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) PutString(_ context.Context, key string, value string) (uint64, error) {
	_ret := _m.Called(key, value)

	if _rf, ok := _ret.Get(0).(func(string, string) (uint64, error)); ok {
		return _rf(key, value)
	}

	_ra0, _ := _ret.Get(0).(uint64)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *bucketMock) OnPutString(key string, value string) *bucketPutStringCall {
	return &bucketPutStringCall{Call: _m.Mock.On("PutString", key, value), Parent: _m}
}

func (_m *bucketMock) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return &bucketPutStringCall{Call: _m.Mock.On("PutString", key, value), Parent: _m}
}

type bucketPutStringCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketPutStringCall) Panic(msg string) *bucketPutStringCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketPutStringCall) Once() *bucketPutStringCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketPutStringCall) Twice() *bucketPutStringCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketPutStringCall) Times(i int) *bucketPutStringCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketPutStringCall) WaitUntil(w <-chan time.Time) *bucketPutStringCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketPutStringCall) After(d time.Duration) *bucketPutStringCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketPutStringCall) Run(fn func(args mock.Arguments)) *bucketPutStringCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketPutStringCall) Maybe() *bucketPutStringCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketPutStringCall) TypedReturns(a uint64, b error) *bucketPutStringCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *bucketPutStringCall) ReturnsFn(fn func(string, string) (uint64, error)) *bucketPutStringCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketPutStringCall) TypedRun(fn func(string, string)) *bucketPutStringCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_key := args.String(0)
		_value := args.String(1)
		fn(_key, _value)
	})
	return _c
}

func (_c *bucketPutStringCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketPutStringCall) OnCreate(key string, value []byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketPutStringCall) OnDelete(key string, opts []jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketPutStringCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketPutStringCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketPutStringCall) OnHistory(key string, opts []jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketPutStringCall) OnKeys(opts []jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketPutStringCall) OnListKeys(opts []jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketPutStringCall) OnListKeysFiltered(filters []string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketPutStringCall) OnPurge(key string, opts []jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketPutStringCall) OnPurgeDeletes(opts []jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketPutStringCall) OnPut(key string, value []byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketPutStringCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketPutStringCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketPutStringCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketPutStringCall) OnWatch(keys string, opts []jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketPutStringCall) OnWatchAll(opts []jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketPutStringCall) OnWatchFiltered(keys []string, opts []jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketPutStringCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketPutStringCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketPutStringCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketPutStringCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketPutStringCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketPutStringCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketPutStringCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketPutStringCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketPutStringCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketPutStringCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketPutStringCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketPutStringCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketPutStringCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketPutStringCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketPutStringCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketPutStringCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketPutStringCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketPutStringCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) Status(_ context.Context) (jetstream.KeyValueStatus, error) {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() (jetstream.KeyValueStatus, error)); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(jetstream.KeyValueStatus)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *bucketMock) OnStatus() *bucketStatusCall {
	return &bucketStatusCall{Call: _m.Mock.On("Status"), Parent: _m}
}

func (_m *bucketMock) OnStatusRaw() *bucketStatusCall {
	return &bucketStatusCall{Call: _m.Mock.On("Status"), Parent: _m}
}

type bucketStatusCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketStatusCall) Panic(msg string) *bucketStatusCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketStatusCall) Once() *bucketStatusCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketStatusCall) Twice() *bucketStatusCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketStatusCall) Times(i int) *bucketStatusCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketStatusCall) WaitUntil(w <-chan time.Time) *bucketStatusCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketStatusCall) After(d time.Duration) *bucketStatusCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketStatusCall) Run(fn func(args mock.Arguments)) *bucketStatusCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketStatusCall) Maybe() *bucketStatusCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketStatusCall) TypedReturns(a jetstream.KeyValueStatus, b error) *bucketStatusCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *bucketStatusCall) ReturnsFn(fn func() (jetstream.KeyValueStatus, error)) *bucketStatusCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketStatusCall) TypedRun(fn func()) *bucketStatusCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *bucketStatusCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketStatusCall) OnCreate(key string, value []byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketStatusCall) OnDelete(key string, opts []jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketStatusCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketStatusCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketStatusCall) OnHistory(key string, opts []jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketStatusCall) OnKeys(opts []jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketStatusCall) OnListKeys(opts []jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketStatusCall) OnListKeysFiltered(filters []string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketStatusCall) OnPurge(key string, opts []jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketStatusCall) OnPurgeDeletes(opts []jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketStatusCall) OnPut(key string, value []byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketStatusCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketStatusCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketStatusCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketStatusCall) OnWatch(keys string, opts []jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketStatusCall) OnWatchAll(opts []jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketStatusCall) OnWatchFiltered(keys []string, opts []jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketStatusCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketStatusCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketStatusCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketStatusCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketStatusCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketStatusCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketStatusCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketStatusCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketStatusCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketStatusCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketStatusCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketStatusCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketStatusCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketStatusCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketStatusCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketStatusCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketStatusCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketStatusCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) Update(_ context.Context, key string, value []byte, revision uint64) (uint64, error) {
	_ret := _m.Called(key, value, revision)

	if _rf, ok := _ret.Get(0).(func(string, []byte, uint64) (uint64, error)); ok {
		return _rf(key, value, revision)
	}

	_ra0, _ := _ret.Get(0).(uint64)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *bucketMock) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return &bucketUpdateCall{Call: _m.Mock.On("Update", key, value, revision), Parent: _m}
}

func (_m *bucketMock) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return &bucketUpdateCall{Call: _m.Mock.On("Update", key, value, revision), Parent: _m}
}

type bucketUpdateCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketUpdateCall) Panic(msg string) *bucketUpdateCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketUpdateCall) Once() *bucketUpdateCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketUpdateCall) Twice() *bucketUpdateCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketUpdateCall) Times(i int) *bucketUpdateCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketUpdateCall) WaitUntil(w <-chan time.Time) *bucketUpdateCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketUpdateCall) After(d time.Duration) *bucketUpdateCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketUpdateCall) Run(fn func(args mock.Arguments)) *bucketUpdateCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketUpdateCall) Maybe() *bucketUpdateCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketUpdateCall) TypedReturns(a uint64, b error) *bucketUpdateCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *bucketUpdateCall) ReturnsFn(fn func(string, []byte, uint64) (uint64, error)) *bucketUpdateCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketUpdateCall) TypedRun(fn func(string, []byte, uint64)) *bucketUpdateCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_key := args.String(0)
		_value, _ := args.Get(1).([]byte)
		_revision, _ := args.Get(2).(uint64)
		fn(_key, _value, _revision)
	})
	return _c
}

func (_c *bucketUpdateCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketUpdateCall) OnCreate(key string, value []byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketUpdateCall) OnDelete(key string, opts []jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketUpdateCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketUpdateCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketUpdateCall) OnHistory(key string, opts []jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketUpdateCall) OnKeys(opts []jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketUpdateCall) OnListKeys(opts []jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketUpdateCall) OnListKeysFiltered(filters []string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketUpdateCall) OnPurge(key string, opts []jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketUpdateCall) OnPurgeDeletes(opts []jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketUpdateCall) OnPut(key string, value []byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketUpdateCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketUpdateCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketUpdateCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketUpdateCall) OnWatch(keys string, opts []jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketUpdateCall) OnWatchAll(opts []jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketUpdateCall) OnWatchFiltered(keys []string, opts []jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketUpdateCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketUpdateCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketUpdateCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketUpdateCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketUpdateCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketUpdateCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketUpdateCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketUpdateCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketUpdateCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketUpdateCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketUpdateCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketUpdateCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketUpdateCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketUpdateCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketUpdateCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketUpdateCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketUpdateCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketUpdateCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) Watch(_ context.Context, keys string, opts ...jetstream.WatchOpt) (jetstream.KeyWatcher, error) {
	_ret := _m.Called(keys, opts)

	if _rf, ok := _ret.Get(0).(func(string, ...jetstream.WatchOpt) (jetstream.KeyWatcher, error)); ok {
		return _rf(keys, opts...)
	}

	_ra0, _ := _ret.Get(0).(jetstream.KeyWatcher)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *bucketMock) OnWatch(keys string, opts ...jetstream.WatchOpt) *bucketWatchCall {
	return &bucketWatchCall{Call: _m.Mock.On("Watch", keys, opts), Parent: _m}
}

func (_m *bucketMock) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return &bucketWatchCall{Call: _m.Mock.On("Watch", keys, opts), Parent: _m}
}

type bucketWatchCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketWatchCall) Panic(msg string) *bucketWatchCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketWatchCall) Once() *bucketWatchCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketWatchCall) Twice() *bucketWatchCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketWatchCall) Times(i int) *bucketWatchCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketWatchCall) WaitUntil(w <-chan time.Time) *bucketWatchCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketWatchCall) After(d time.Duration) *bucketWatchCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketWatchCall) Run(fn func(args mock.Arguments)) *bucketWatchCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketWatchCall) Maybe() *bucketWatchCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketWatchCall) TypedReturns(a jetstream.KeyWatcher, b error) *bucketWatchCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *bucketWatchCall) ReturnsFn(fn func(string, ...jetstream.WatchOpt) (jetstream.KeyWatcher, error)) *bucketWatchCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketWatchCall) TypedRun(fn func(string, ...jetstream.WatchOpt)) *bucketWatchCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_keys := args.String(0)
		_opts, _ := args.Get(1).([]jetstream.WatchOpt)
		fn(_keys, _opts...)
	})
	return _c
}

func (_c *bucketWatchCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketWatchCall) OnCreate(key string, value ...byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketWatchCall) OnDelete(key string, opts ...jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketWatchCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketWatchCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketWatchCall) OnHistory(key string, opts ...jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketWatchCall) OnKeys(opts ...jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketWatchCall) OnListKeys(opts ...jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketWatchCall) OnListKeysFiltered(filters ...string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketWatchCall) OnPurge(key string, opts ...jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketWatchCall) OnPurgeDeletes(opts ...jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketWatchCall) OnPut(key string, value ...byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketWatchCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketWatchCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketWatchCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketWatchCall) OnWatch(keys string, opts ...jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketWatchCall) OnWatchAll(opts ...jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketWatchCall) OnWatchFiltered(keys []string, opts ...jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketWatchCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketWatchCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketWatchCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketWatchCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketWatchCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketWatchCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketWatchCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketWatchCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketWatchCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketWatchCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketWatchCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketWatchCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketWatchCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketWatchCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketWatchCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketWatchCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketWatchCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketWatchCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) WatchAll(_ context.Context, opts ...jetstream.WatchOpt) (jetstream.KeyWatcher, error) {
	_ret := _m.Called(opts)

	if _rf, ok := _ret.Get(0).(func(...jetstream.WatchOpt) (jetstream.KeyWatcher, error)); ok {
		return _rf(opts...)
	}

	_ra0, _ := _ret.Get(0).(jetstream.KeyWatcher)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *bucketMock) OnWatchAll(opts ...jetstream.WatchOpt) *bucketWatchAllCall {
	return &bucketWatchAllCall{Call: _m.Mock.On("WatchAll", opts), Parent: _m}
}

func (_m *bucketMock) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return &bucketWatchAllCall{Call: _m.Mock.On("WatchAll", opts), Parent: _m}
}

type bucketWatchAllCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketWatchAllCall) Panic(msg string) *bucketWatchAllCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketWatchAllCall) Once() *bucketWatchAllCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketWatchAllCall) Twice() *bucketWatchAllCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketWatchAllCall) Times(i int) *bucketWatchAllCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketWatchAllCall) WaitUntil(w <-chan time.Time) *bucketWatchAllCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketWatchAllCall) After(d time.Duration) *bucketWatchAllCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketWatchAllCall) Run(fn func(args mock.Arguments)) *bucketWatchAllCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketWatchAllCall) Maybe() *bucketWatchAllCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketWatchAllCall) TypedReturns(a jetstream.KeyWatcher, b error) *bucketWatchAllCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *bucketWatchAllCall) ReturnsFn(fn func(...jetstream.WatchOpt) (jetstream.KeyWatcher, error)) *bucketWatchAllCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketWatchAllCall) TypedRun(fn func(...jetstream.WatchOpt)) *bucketWatchAllCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_opts, _ := args.Get(0).([]jetstream.WatchOpt)
		fn(_opts...)
	})
	return _c
}

func (_c *bucketWatchAllCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketWatchAllCall) OnCreate(key string, value ...byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketWatchAllCall) OnDelete(key string, opts ...jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketWatchAllCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketWatchAllCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketWatchAllCall) OnHistory(key string, opts ...jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketWatchAllCall) OnKeys(opts ...jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketWatchAllCall) OnListKeys(opts ...jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketWatchAllCall) OnListKeysFiltered(filters ...string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketWatchAllCall) OnPurge(key string, opts ...jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketWatchAllCall) OnPurgeDeletes(opts ...jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketWatchAllCall) OnPut(key string, value ...byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketWatchAllCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketWatchAllCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketWatchAllCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketWatchAllCall) OnWatch(keys string, opts ...jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketWatchAllCall) OnWatchAll(opts ...jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketWatchAllCall) OnWatchFiltered(keys []string, opts ...jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketWatchAllCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketWatchAllCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketWatchAllCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketWatchAllCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketWatchAllCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketWatchAllCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketWatchAllCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketWatchAllCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketWatchAllCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketWatchAllCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketWatchAllCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketWatchAllCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketWatchAllCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketWatchAllCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketWatchAllCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketWatchAllCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketWatchAllCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketWatchAllCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

func (_m *bucketMock) WatchFiltered(_ context.Context, keys []string, opts ...jetstream.WatchOpt) (jetstream.KeyWatcher, error) {
	_ret := _m.Called(keys, opts)

	if _rf, ok := _ret.Get(0).(func([]string, ...jetstream.WatchOpt) (jetstream.KeyWatcher, error)); ok {
		return _rf(keys, opts...)
	}

	_ra0, _ := _ret.Get(0).(jetstream.KeyWatcher)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *bucketMock) OnWatchFiltered(keys []string, opts ...jetstream.WatchOpt) *bucketWatchFilteredCall {
	return &bucketWatchFilteredCall{Call: _m.Mock.On("WatchFiltered", keys, opts), Parent: _m}
}

func (_m *bucketMock) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return &bucketWatchFilteredCall{Call: _m.Mock.On("WatchFiltered", keys, opts), Parent: _m}
}

type bucketWatchFilteredCall struct {
	*mock.Call
	Parent *bucketMock
}

func (_c *bucketWatchFilteredCall) Panic(msg string) *bucketWatchFilteredCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *bucketWatchFilteredCall) Once() *bucketWatchFilteredCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *bucketWatchFilteredCall) Twice() *bucketWatchFilteredCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *bucketWatchFilteredCall) Times(i int) *bucketWatchFilteredCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *bucketWatchFilteredCall) WaitUntil(w <-chan time.Time) *bucketWatchFilteredCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *bucketWatchFilteredCall) After(d time.Duration) *bucketWatchFilteredCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *bucketWatchFilteredCall) Run(fn func(args mock.Arguments)) *bucketWatchFilteredCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *bucketWatchFilteredCall) Maybe() *bucketWatchFilteredCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *bucketWatchFilteredCall) TypedReturns(a jetstream.KeyWatcher, b error) *bucketWatchFilteredCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *bucketWatchFilteredCall) ReturnsFn(fn func([]string, ...jetstream.WatchOpt) (jetstream.KeyWatcher, error)) *bucketWatchFilteredCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *bucketWatchFilteredCall) TypedRun(fn func([]string, ...jetstream.WatchOpt)) *bucketWatchFilteredCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_keys, _ := args.Get(0).([]string)
		_opts, _ := args.Get(1).([]jetstream.WatchOpt)
		fn(_keys, _opts...)
	})
	return _c
}

func (_c *bucketWatchFilteredCall) OnBucket() *bucketBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *bucketWatchFilteredCall) OnCreate(key string, value ...byte) *bucketCreateCall {
	return _c.Parent.OnCreate(key, value)
}

func (_c *bucketWatchFilteredCall) OnDelete(key string, opts ...jetstream.KVDeleteOpt) *bucketDeleteCall {
	return _c.Parent.OnDelete(key, opts...)
}

func (_c *bucketWatchFilteredCall) OnGet(key string) *bucketGetCall {
	return _c.Parent.OnGet(key)
}

func (_c *bucketWatchFilteredCall) OnGetRevision(key string, revision uint64) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevision(key, revision)
}

func (_c *bucketWatchFilteredCall) OnHistory(key string, opts ...jetstream.WatchOpt) *bucketHistoryCall {
	return _c.Parent.OnHistory(key, opts...)
}

func (_c *bucketWatchFilteredCall) OnKeys(opts ...jetstream.WatchOpt) *bucketKeysCall {
	return _c.Parent.OnKeys(opts...)
}

func (_c *bucketWatchFilteredCall) OnListKeys(opts ...jetstream.WatchOpt) *bucketListKeysCall {
	return _c.Parent.OnListKeys(opts...)
}

func (_c *bucketWatchFilteredCall) OnListKeysFiltered(filters ...string) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFiltered(filters...)
}

func (_c *bucketWatchFilteredCall) OnPurge(key string, opts ...jetstream.KVDeleteOpt) *bucketPurgeCall {
	return _c.Parent.OnPurge(key, opts...)
}

func (_c *bucketWatchFilteredCall) OnPurgeDeletes(opts ...jetstream.KVPurgeOpt) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletes(opts...)
}

func (_c *bucketWatchFilteredCall) OnPut(key string, value ...byte) *bucketPutCall {
	return _c.Parent.OnPut(key, value)
}

func (_c *bucketWatchFilteredCall) OnPutString(key string, value string) *bucketPutStringCall {
	return _c.Parent.OnPutString(key, value)
}

func (_c *bucketWatchFilteredCall) OnStatus() *bucketStatusCall {
	return _c.Parent.OnStatus()
}

func (_c *bucketWatchFilteredCall) OnUpdate(key string, value []byte, revision uint64) *bucketUpdateCall {
	return _c.Parent.OnUpdate(key, value, revision)
}

func (_c *bucketWatchFilteredCall) OnWatch(keys string, opts ...jetstream.WatchOpt) *bucketWatchCall {
	return _c.Parent.OnWatch(keys, opts...)
}

func (_c *bucketWatchFilteredCall) OnWatchAll(opts ...jetstream.WatchOpt) *bucketWatchAllCall {
	return _c.Parent.OnWatchAll(opts...)
}

func (_c *bucketWatchFilteredCall) OnWatchFiltered(keys []string, opts ...jetstream.WatchOpt) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFiltered(keys, opts...)
}

func (_c *bucketWatchFilteredCall) OnBucketRaw() *bucketBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *bucketWatchFilteredCall) OnCreateRaw(key interface{}, value interface{}) *bucketCreateCall {
	return _c.Parent.OnCreateRaw(key, value)
}

func (_c *bucketWatchFilteredCall) OnDeleteRaw(key interface{}, opts interface{}) *bucketDeleteCall {
	return _c.Parent.OnDeleteRaw(key, opts)
}

func (_c *bucketWatchFilteredCall) OnGetRaw(key interface{}) *bucketGetCall {
	return _c.Parent.OnGetRaw(key)
}

func (_c *bucketWatchFilteredCall) OnGetRevisionRaw(key interface{}, revision interface{}) *bucketGetRevisionCall {
	return _c.Parent.OnGetRevisionRaw(key, revision)
}

func (_c *bucketWatchFilteredCall) OnHistoryRaw(key interface{}, opts interface{}) *bucketHistoryCall {
	return _c.Parent.OnHistoryRaw(key, opts)
}

func (_c *bucketWatchFilteredCall) OnKeysRaw(opts interface{}) *bucketKeysCall {
	return _c.Parent.OnKeysRaw(opts)
}

func (_c *bucketWatchFilteredCall) OnListKeysRaw(opts interface{}) *bucketListKeysCall {
	return _c.Parent.OnListKeysRaw(opts)
}

func (_c *bucketWatchFilteredCall) OnListKeysFilteredRaw(filters interface{}) *bucketListKeysFilteredCall {
	return _c.Parent.OnListKeysFilteredRaw(filters)
}

func (_c *bucketWatchFilteredCall) OnPurgeRaw(key interface{}, opts interface{}) *bucketPurgeCall {
	return _c.Parent.OnPurgeRaw(key, opts)
}

func (_c *bucketWatchFilteredCall) OnPurgeDeletesRaw(opts interface{}) *bucketPurgeDeletesCall {
	return _c.Parent.OnPurgeDeletesRaw(opts)
}

func (_c *bucketWatchFilteredCall) OnPutRaw(key interface{}, value interface{}) *bucketPutCall {
	return _c.Parent.OnPutRaw(key, value)
}

func (_c *bucketWatchFilteredCall) OnPutStringRaw(key interface{}, value interface{}) *bucketPutStringCall {
	return _c.Parent.OnPutStringRaw(key, value)
}

func (_c *bucketWatchFilteredCall) OnStatusRaw() *bucketStatusCall {
	return _c.Parent.OnStatusRaw()
}

func (_c *bucketWatchFilteredCall) OnUpdateRaw(key interface{}, value interface{}, revision interface{}) *bucketUpdateCall {
	return _c.Parent.OnUpdateRaw(key, value, revision)
}

func (_c *bucketWatchFilteredCall) OnWatchRaw(keys interface{}, opts interface{}) *bucketWatchCall {
	return _c.Parent.OnWatchRaw(keys, opts)
}

func (_c *bucketWatchFilteredCall) OnWatchAllRaw(opts interface{}) *bucketWatchAllCall {
	return _c.Parent.OnWatchAllRaw(opts)
}

func (_c *bucketWatchFilteredCall) OnWatchFilteredRaw(keys interface{}, opts interface{}) *bucketWatchFilteredCall {
	return _c.Parent.OnWatchFilteredRaw(keys, opts)
}

// entryMock mock of entry.
type entryMock struct{ mock.Mock }

// newEntryMock creates a new entryMock.
func newEntryMock(tb testing.TB) *entryMock {
	tb.Helper()

	m := &entryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *entryMock) Bucket() string {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() string); ok {
		return _rf()
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *entryMock) OnBucket() *entryBucketCall {
	return &entryBucketCall{Call: _m.Mock.On("Bucket"), Parent: _m}
}

func (_m *entryMock) OnBucketRaw() *entryBucketCall {
	return &entryBucketCall{Call: _m.Mock.On("Bucket"), Parent: _m}
}

type entryBucketCall struct {
	*mock.Call
	Parent *entryMock
}

func (_c *entryBucketCall) Panic(msg string) *entryBucketCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *entryBucketCall) Once() *entryBucketCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *entryBucketCall) Twice() *entryBucketCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *entryBucketCall) Times(i int) *entryBucketCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *entryBucketCall) WaitUntil(w <-chan time.Time) *entryBucketCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *entryBucketCall) After(d time.Duration) *entryBucketCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *entryBucketCall) Run(fn func(args mock.Arguments)) *entryBucketCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *entryBucketCall) Maybe() *entryBucketCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *entryBucketCall) TypedReturns(a string) *entryBucketCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *entryBucketCall) ReturnsFn(fn func() string) *entryBucketCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *entryBucketCall) TypedRun(fn func()) *entryBucketCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *entryBucketCall) OnBucket() *entryBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *entryBucketCall) OnCreated() *entryCreatedCall {
	return _c.Parent.OnCreated()
}

func (_c *entryBucketCall) OnDelta() *entryDeltaCall {
	return _c.Parent.OnDelta()
}

func (_c *entryBucketCall) OnKey() *entryKeyCall {
	return _c.Parent.OnKey()
}

func (_c *entryBucketCall) OnOperation() *entryOperationCall {
	return _c.Parent.OnOperation()
}

func (_c *entryBucketCall) OnRevision() *entryRevisionCall {
	return _c.Parent.OnRevision()
}

func (_c *entryBucketCall) OnValue() *entryValueCall {
	return _c.Parent.OnValue()
}

func (_c *entryBucketCall) OnBucketRaw() *entryBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *entryBucketCall) OnCreatedRaw() *entryCreatedCall {
	return _c.Parent.OnCreatedRaw()
}

func (_c *entryBucketCall) OnDeltaRaw() *entryDeltaCall {
	return _c.Parent.OnDeltaRaw()
}

func (_c *entryBucketCall) OnKeyRaw() *entryKeyCall {
	return _c.Parent.OnKeyRaw()
}

func (_c *entryBucketCall) OnOperationRaw() *entryOperationCall {
	return _c.Parent.OnOperationRaw()
}

func (_c *entryBucketCall) OnRevisionRaw() *entryRevisionCall {
	return _c.Parent.OnRevisionRaw()
}

func (_c *entryBucketCall) OnValueRaw() *entryValueCall {
	return _c.Parent.OnValueRaw()
}

func (_m *entryMock) Created() time.Time {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() time.Time); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(time.Time)

	return _ra0
}

func (_m *entryMock) OnCreated() *entryCreatedCall {
	return &entryCreatedCall{Call: _m.Mock.On("Created"), Parent: _m}
}

func (_m *entryMock) OnCreatedRaw() *entryCreatedCall {
	return &entryCreatedCall{Call: _m.Mock.On("Created"), Parent: _m}
}

type entryCreatedCall struct {
	*mock.Call
	Parent *entryMock
}

func (_c *entryCreatedCall) Panic(msg string) *entryCreatedCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *entryCreatedCall) Once() *entryCreatedCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *entryCreatedCall) Twice() *entryCreatedCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *entryCreatedCall) Times(i int) *entryCreatedCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *entryCreatedCall) WaitUntil(w <-chan time.Time) *entryCreatedCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *entryCreatedCall) After(d time.Duration) *entryCreatedCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *entryCreatedCall) Run(fn func(args mock.Arguments)) *entryCreatedCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *entryCreatedCall) Maybe() *entryCreatedCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *entryCreatedCall) TypedReturns(a time.Time) *entryCreatedCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *entryCreatedCall) ReturnsFn(fn func() time.Time) *entryCreatedCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *entryCreatedCall) TypedRun(fn func()) *entryCreatedCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *entryCreatedCall) OnBucket() *entryBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *entryCreatedCall) OnCreated() *entryCreatedCall {
	return _c.Parent.OnCreated()
}

func (_c *entryCreatedCall) OnDelta() *entryDeltaCall {
	return _c.Parent.OnDelta()
}

func (_c *entryCreatedCall) OnKey() *entryKeyCall {
	return _c.Parent.OnKey()
}

func (_c *entryCreatedCall) OnOperation() *entryOperationCall {
	return _c.Parent.OnOperation()
}

func (_c *entryCreatedCall) OnRevision() *entryRevisionCall {
	return _c.Parent.OnRevision()
}

func (_c *entryCreatedCall) OnValue() *entryValueCall {
	return _c.Parent.OnValue()
}

func (_c *entryCreatedCall) OnBucketRaw() *entryBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *entryCreatedCall) OnCreatedRaw() *entryCreatedCall {
	return _c.Parent.OnCreatedRaw()
}

func (_c *entryCreatedCall) OnDeltaRaw() *entryDeltaCall {
	return _c.Parent.OnDeltaRaw()
}

func (_c *entryCreatedCall) OnKeyRaw() *entryKeyCall {
	return _c.Parent.OnKeyRaw()
}

func (_c *entryCreatedCall) OnOperationRaw() *entryOperationCall {
	return _c.Parent.OnOperationRaw()
}

func (_c *entryCreatedCall) OnRevisionRaw() *entryRevisionCall {
	return _c.Parent.OnRevisionRaw()
}

func (_c *entryCreatedCall) OnValueRaw() *entryValueCall {
	return _c.Parent.OnValueRaw()
}

func (_m *entryMock) Delta() uint64 {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() uint64); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(uint64)

	return _ra0
}

func (_m *entryMock) OnDelta() *entryDeltaCall {
	return &entryDeltaCall{Call: _m.Mock.On("Delta"), Parent: _m}
}

func (_m *entryMock) OnDeltaRaw() *entryDeltaCall {
	return &entryDeltaCall{Call: _m.Mock.On("Delta"), Parent: _m}
}

type entryDeltaCall struct {
	*mock.Call
	Parent *entryMock
}

func (_c *entryDeltaCall) Panic(msg string) *entryDeltaCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *entryDeltaCall) Once() *entryDeltaCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *entryDeltaCall) Twice() *entryDeltaCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *entryDeltaCall) Times(i int) *entryDeltaCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *entryDeltaCall) WaitUntil(w <-chan time.Time) *entryDeltaCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *entryDeltaCall) After(d time.Duration) *entryDeltaCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *entryDeltaCall) Run(fn func(args mock.Arguments)) *entryDeltaCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *entryDeltaCall) Maybe() *entryDeltaCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *entryDeltaCall) TypedReturns(a uint64) *entryDeltaCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *entryDeltaCall) ReturnsFn(fn func() uint64) *entryDeltaCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *entryDeltaCall) TypedRun(fn func()) *entryDeltaCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *entryDeltaCall) OnBucket() *entryBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *entryDeltaCall) OnCreated() *entryCreatedCall {
	return _c.Parent.OnCreated()
}

func (_c *entryDeltaCall) OnDelta() *entryDeltaCall {
	return _c.Parent.OnDelta()
}

func (_c *entryDeltaCall) OnKey() *entryKeyCall {
	return _c.Parent.OnKey()
}

func (_c *entryDeltaCall) OnOperation() *entryOperationCall {
	return _c.Parent.OnOperation()
}

func (_c *entryDeltaCall) OnRevision() *entryRevisionCall {
	return _c.Parent.OnRevision()
}

func (_c *entryDeltaCall) OnValue() *entryValueCall {
	return _c.Parent.OnValue()
}

func (_c *entryDeltaCall) OnBucketRaw() *entryBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *entryDeltaCall) OnCreatedRaw() *entryCreatedCall {
	return _c.Parent.OnCreatedRaw()
}

func (_c *entryDeltaCall) OnDeltaRaw() *entryDeltaCall {
	return _c.Parent.OnDeltaRaw()
}

func (_c *entryDeltaCall) OnKeyRaw() *entryKeyCall {
	return _c.Parent.OnKeyRaw()
}

func (_c *entryDeltaCall) OnOperationRaw() *entryOperationCall {
	return _c.Parent.OnOperationRaw()
}

func (_c *entryDeltaCall) OnRevisionRaw() *entryRevisionCall {
	return _c.Parent.OnRevisionRaw()
}

func (_c *entryDeltaCall) OnValueRaw() *entryValueCall {
	return _c.Parent.OnValueRaw()
}

func (_m *entryMock) Key() string {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() string); ok {
		return _rf()
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *entryMock) OnKey() *entryKeyCall {
	return &entryKeyCall{Call: _m.Mock.On("Key"), Parent: _m}
}

func (_m *entryMock) OnKeyRaw() *entryKeyCall {
	return &entryKeyCall{Call: _m.Mock.On("Key"), Parent: _m}
}

type entryKeyCall struct {
	*mock.Call
	Parent *entryMock
}

func (_c *entryKeyCall) Panic(msg string) *entryKeyCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *entryKeyCall) Once() *entryKeyCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *entryKeyCall) Twice() *entryKeyCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *entryKeyCall) Times(i int) *entryKeyCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *entryKeyCall) WaitUntil(w <-chan time.Time) *entryKeyCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *entryKeyCall) After(d time.Duration) *entryKeyCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *entryKeyCall) Run(fn func(args mock.Arguments)) *entryKeyCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *entryKeyCall) Maybe() *entryKeyCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *entryKeyCall) TypedReturns(a string) *entryKeyCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *entryKeyCall) ReturnsFn(fn func() string) *entryKeyCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *entryKeyCall) TypedRun(fn func()) *entryKeyCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *entryKeyCall) OnBucket() *entryBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *entryKeyCall) OnCreated() *entryCreatedCall {
	return _c.Parent.OnCreated()
}

func (_c *entryKeyCall) OnDelta() *entryDeltaCall {
	return _c.Parent.OnDelta()
}

func (_c *entryKeyCall) OnKey() *entryKeyCall {
	return _c.Parent.OnKey()
}

func (_c *entryKeyCall) OnOperation() *entryOperationCall {
	return _c.Parent.OnOperation()
}

func (_c *entryKeyCall) OnRevision() *entryRevisionCall {
	return _c.Parent.OnRevision()
}

func (_c *entryKeyCall) OnValue() *entryValueCall {
	return _c.Parent.OnValue()
}

func (_c *entryKeyCall) OnBucketRaw() *entryBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *entryKeyCall) OnCreatedRaw() *entryCreatedCall {
	return _c.Parent.OnCreatedRaw()
}

func (_c *entryKeyCall) OnDeltaRaw() *entryDeltaCall {
	return _c.Parent.OnDeltaRaw()
}

func (_c *entryKeyCall) OnKeyRaw() *entryKeyCall {
	return _c.Parent.OnKeyRaw()
}

func (_c *entryKeyCall) OnOperationRaw() *entryOperationCall {
	return _c.Parent.OnOperationRaw()
}

func (_c *entryKeyCall) OnRevisionRaw() *entryRevisionCall {
	return _c.Parent.OnRevisionRaw()
}

func (_c *entryKeyCall) OnValueRaw() *entryValueCall {
	return _c.Parent.OnValueRaw()
}

func (_m *entryMock) Operation() jetstream.KeyValueOp {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() jetstream.KeyValueOp); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(jetstream.KeyValueOp)

	return _ra0
}

func (_m *entryMock) OnOperation() *entryOperationCall {
	return &entryOperationCall{Call: _m.Mock.On("Operation"), Parent: _m}
}

func (_m *entryMock) OnOperationRaw() *entryOperationCall {
	return &entryOperationCall{Call: _m.Mock.On("Operation"), Parent: _m}
}

type entryOperationCall struct {
	*mock.Call
	Parent *entryMock
}

func (_c *entryOperationCall) Panic(msg string) *entryOperationCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *entryOperationCall) Once() *entryOperationCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *entryOperationCall) Twice() *entryOperationCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *entryOperationCall) Times(i int) *entryOperationCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *entryOperationCall) WaitUntil(w <-chan time.Time) *entryOperationCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *entryOperationCall) After(d time.Duration) *entryOperationCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *entryOperationCall) Run(fn func(args mock.Arguments)) *entryOperationCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *entryOperationCall) Maybe() *entryOperationCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *entryOperationCall) TypedReturns(a jetstream.KeyValueOp) *entryOperationCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *entryOperationCall) ReturnsFn(fn func() jetstream.KeyValueOp) *entryOperationCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *entryOperationCall) TypedRun(fn func()) *entryOperationCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *entryOperationCall) OnBucket() *entryBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *entryOperationCall) OnCreated() *entryCreatedCall {
	return _c.Parent.OnCreated()
}

func (_c *entryOperationCall) OnDelta() *entryDeltaCall {
	return _c.Parent.OnDelta()
}

func (_c *entryOperationCall) OnKey() *entryKeyCall {
	return _c.Parent.OnKey()
}

func (_c *entryOperationCall) OnOperation() *entryOperationCall {
	return _c.Parent.OnOperation()
}

func (_c *entryOperationCall) OnRevision() *entryRevisionCall {
	return _c.Parent.OnRevision()
}

func (_c *entryOperationCall) OnValue() *entryValueCall {
	return _c.Parent.OnValue()
}

func (_c *entryOperationCall) OnBucketRaw() *entryBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *entryOperationCall) OnCreatedRaw() *entryCreatedCall {
	return _c.Parent.OnCreatedRaw()
}

func (_c *entryOperationCall) OnDeltaRaw() *entryDeltaCall {
	return _c.Parent.OnDeltaRaw()
}

func (_c *entryOperationCall) OnKeyRaw() *entryKeyCall {
	return _c.Parent.OnKeyRaw()
}

func (_c *entryOperationCall) OnOperationRaw() *entryOperationCall {
	return _c.Parent.OnOperationRaw()
}

func (_c *entryOperationCall) OnRevisionRaw() *entryRevisionCall {
	return _c.Parent.OnRevisionRaw()
}

func (_c *entryOperationCall) OnValueRaw() *entryValueCall {
	return _c.Parent.OnValueRaw()
}

func (_m *entryMock) Revision() uint64 {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() uint64); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(uint64)

	return _ra0
}

func (_m *entryMock) OnRevision() *entryRevisionCall {
	return &entryRevisionCall{Call: _m.Mock.On("Revision"), Parent: _m}
}

func (_m *entryMock) OnRevisionRaw() *entryRevisionCall {
	return &entryRevisionCall{Call: _m.Mock.On("Revision"), Parent: _m}
}

type entryRevisionCall struct {
	*mock.Call
	Parent *entryMock
}

func (_c *entryRevisionCall) Panic(msg string) *entryRevisionCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *entryRevisionCall) Once() *entryRevisionCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *entryRevisionCall) Twice() *entryRevisionCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *entryRevisionCall) Times(i int) *entryRevisionCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *entryRevisionCall) WaitUntil(w <-chan time.Time) *entryRevisionCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *entryRevisionCall) After(d time.Duration) *entryRevisionCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *entryRevisionCall) Run(fn func(args mock.Arguments)) *entryRevisionCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *entryRevisionCall) Maybe() *entryRevisionCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *entryRevisionCall) TypedReturns(a uint64) *entryRevisionCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *entryRevisionCall) ReturnsFn(fn func() uint64) *entryRevisionCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *entryRevisionCall) TypedRun(fn func()) *entryRevisionCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *entryRevisionCall) OnBucket() *entryBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *entryRevisionCall) OnCreated() *entryCreatedCall {
	return _c.Parent.OnCreated()
}

func (_c *entryRevisionCall) OnDelta() *entryDeltaCall {
	return _c.Parent.OnDelta()
}

func (_c *entryRevisionCall) OnKey() *entryKeyCall {
	return _c.Parent.OnKey()
}

func (_c *entryRevisionCall) OnOperation() *entryOperationCall {
	return _c.Parent.OnOperation()
}

func (_c *entryRevisionCall) OnRevision() *entryRevisionCall {
	return _c.Parent.OnRevision()
}

func (_c *entryRevisionCall) OnValue() *entryValueCall {
	return _c.Parent.OnValue()
}

func (_c *entryRevisionCall) OnBucketRaw() *entryBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *entryRevisionCall) OnCreatedRaw() *entryCreatedCall {
	return _c.Parent.OnCreatedRaw()
}

func (_c *entryRevisionCall) OnDeltaRaw() *entryDeltaCall {
	return _c.Parent.OnDeltaRaw()
}

func (_c *entryRevisionCall) OnKeyRaw() *entryKeyCall {
	return _c.Parent.OnKeyRaw()
}

func (_c *entryRevisionCall) OnOperationRaw() *entryOperationCall {
	return _c.Parent.OnOperationRaw()
}

func (_c *entryRevisionCall) OnRevisionRaw() *entryRevisionCall {
	return _c.Parent.OnRevisionRaw()
}

func (_c *entryRevisionCall) OnValueRaw() *entryValueCall {
	return _c.Parent.OnValueRaw()
}

func (_m *entryMock) Value() []byte {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() []byte); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).([]byte)

	return _ra0
}

func (_m *entryMock) OnValue() *entryValueCall {
	return &entryValueCall{Call: _m.Mock.On("Value"), Parent: _m}
}

func (_m *entryMock) OnValueRaw() *entryValueCall {
	return &entryValueCall{Call: _m.Mock.On("Value"), Parent: _m}
}

type entryValueCall struct {
	*mock.Call
	Parent *entryMock
}

func (_c *entryValueCall) Panic(msg string) *entryValueCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *entryValueCall) Once() *entryValueCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *entryValueCall) Twice() *entryValueCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *entryValueCall) Times(i int) *entryValueCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *entryValueCall) WaitUntil(w <-chan time.Time) *entryValueCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *entryValueCall) After(d time.Duration) *entryValueCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *entryValueCall) Run(fn func(args mock.Arguments)) *entryValueCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *entryValueCall) Maybe() *entryValueCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *entryValueCall) TypedReturns(a []byte) *entryValueCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *entryValueCall) ReturnsFn(fn func() []byte) *entryValueCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *entryValueCall) TypedRun(fn func()) *entryValueCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *entryValueCall) OnBucket() *entryBucketCall {
	return _c.Parent.OnBucket()
}

func (_c *entryValueCall) OnCreated() *entryCreatedCall {
	return _c.Parent.OnCreated()
}

func (_c *entryValueCall) OnDelta() *entryDeltaCall {
	return _c.Parent.OnDelta()
}

func (_c *entryValueCall) OnKey() *entryKeyCall {
	return _c.Parent.OnKey()
}

func (_c *entryValueCall) OnOperation() *entryOperationCall {
	return _c.Parent.OnOperation()
}

func (_c *entryValueCall) OnRevision() *entryRevisionCall {
	return _c.Parent.OnRevision()
}

func (_c *entryValueCall) OnValue() *entryValueCall {
	return _c.Parent.OnValue()
}

func (_c *entryValueCall) OnBucketRaw() *entryBucketCall {
	return _c.Parent.OnBucketRaw()
}

func (_c *entryValueCall) OnCreatedRaw() *entryCreatedCall {
	return _c.Parent.OnCreatedRaw()
}

func (_c *entryValueCall) OnDeltaRaw() *entryDeltaCall {
	return _c.Parent.OnDeltaRaw()
}

func (_c *entryValueCall) OnKeyRaw() *entryKeyCall {
	return _c.Parent.OnKeyRaw()
}

func (_c *entryValueCall) OnOperationRaw() *entryOperationCall {
	return _c.Parent.OnOperationRaw()
}

func (_c *entryValueCall) OnRevisionRaw() *entryRevisionCall {
	return _c.Parent.OnRevisionRaw()
}

func (_c *entryValueCall) OnValueRaw() *entryValueCall {
	return _c.Parent.OnValueRaw()
}

// watcherMock mock of watcher.
type watcherMock struct{ mock.Mock }

// newWatcherMock creates a new watcherMock.
func newWatcherMock(tb testing.TB) *watcherMock {
	tb.Helper()

	m := &watcherMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *watcherMock) Stop() error {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() error); ok {
		return _rf()
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *watcherMock) OnStop() *watcherStopCall {
	return &watcherStopCall{Call: _m.Mock.On("Stop"), Parent: _m}
}

func (_m *watcherMock) OnStopRaw() *watcherStopCall {
	return &watcherStopCall{Call: _m.Mock.On("Stop"), Parent: _m}
}

type watcherStopCall struct {
	*mock.Call
	Parent *watcherMock
}

func (_c *watcherStopCall) Panic(msg string) *watcherStopCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *watcherStopCall) Once() *watcherStopCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *watcherStopCall) Twice() *watcherStopCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *watcherStopCall) Times(i int) *watcherStopCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *watcherStopCall) WaitUntil(w <-chan time.Time) *watcherStopCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *watcherStopCall) After(d time.Duration) *watcherStopCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *watcherStopCall) Run(fn func(args mock.Arguments)) *watcherStopCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *watcherStopCall) Maybe() *watcherStopCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *watcherStopCall) TypedReturns(a error) *watcherStopCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *watcherStopCall) ReturnsFn(fn func() error) *watcherStopCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *watcherStopCall) TypedRun(fn func()) *watcherStopCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *watcherStopCall) OnStop() *watcherStopCall {
	return _c.Parent.OnStop()
}

func (_c *watcherStopCall) OnUpdates() *watcherUpdatesCall {
	return _c.Parent.OnUpdates()
}

func (_c *watcherStopCall) OnStopRaw() *watcherStopCall {
	return _c.Parent.OnStopRaw()
}

func (_c *watcherStopCall) OnUpdatesRaw() *watcherUpdatesCall {
	return _c.Parent.OnUpdatesRaw()
}

func (_m *watcherMock) Updates() <-chan jetstream.KeyValueEntry {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() <-chan jetstream.KeyValueEntry); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(<-chan jetstream.KeyValueEntry)

	return _ra0
}

func (_m *watcherMock) OnUpdates() *watcherUpdatesCall {
	return &watcherUpdatesCall{Call: _m.Mock.On("Updates"), Parent: _m}
}

func (_m *watcherMock) OnUpdatesRaw() *watcherUpdatesCall {
	return &watcherUpdatesCall{Call: _m.Mock.On("Updates"), Parent: _m}
}

type watcherUpdatesCall struct {
	*mock.Call
	Parent *watcherMock
}

func (_c *watcherUpdatesCall) Panic(msg string) *watcherUpdatesCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *watcherUpdatesCall) Once() *watcherUpdatesCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *watcherUpdatesCall) Twice() *watcherUpdatesCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *watcherUpdatesCall) Times(i int) *watcherUpdatesCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *watcherUpdatesCall) WaitUntil(w <-chan time.Time) *watcherUpdatesCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *watcherUpdatesCall) After(d time.Duration) *watcherUpdatesCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *watcherUpdatesCall) Run(fn func(args mock.Arguments)) *watcherUpdatesCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *watcherUpdatesCall) Maybe() *watcherUpdatesCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *watcherUpdatesCall) TypedReturns(a <-chan jetstream.KeyValueEntry) *watcherUpdatesCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *watcherUpdatesCall) ReturnsFn(fn func() <-chan jetstream.KeyValueEntry) *watcherUpdatesCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *watcherUpdatesCall) TypedRun(fn func()) *watcherUpdatesCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *watcherUpdatesCall) OnStop() *watcherStopCall {
	return _c.Parent.OnStop()
}

func (_c *watcherUpdatesCall) OnUpdates() *watcherUpdatesCall {
	return _c.Parent.OnUpdates()
}

func (_c *watcherUpdatesCall) OnStopRaw() *watcherStopCall {
	return _c.Parent.OnStopRaw()
}

func (_c *watcherUpdatesCall) OnUpdatesRaw() *watcherUpdatesCall {
	return _c.Parent.OnUpdatesRaw()
}
