// Code generated by mockery. DO NOT EDIT.

package peanats_test

import (
	context "context"

	jetstream "github.com/nats-io/nats.go/jetstream"
	mock "github.com/stretchr/testify/mock"
)

// consumerMock is an autogenerated mock type for the Consumer type
type consumerMock struct {
	mock.Mock
}

type consumerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *consumerMock) EXPECT() *consumerMock_Expecter {
	return &consumerMock_Expecter{mock: &_m.Mock}
}

// CachedInfo provides a mock function with no fields
func (_m *consumerMock) CachedInfo() *jetstream.ConsumerInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CachedInfo")
	}

	var r0 *jetstream.ConsumerInfo
	if rf, ok := ret.Get(0).(func() *jetstream.ConsumerInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jetstream.ConsumerInfo)
		}
	}

	return r0
}

// consumerMock_CachedInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CachedInfo'
type consumerMock_CachedInfo_Call struct {
	*mock.Call
}

// CachedInfo is a helper method to define mock.On call
func (_e *consumerMock_Expecter) CachedInfo() *consumerMock_CachedInfo_Call {
	return &consumerMock_CachedInfo_Call{Call: _e.mock.On("CachedInfo")}
}

func (_c *consumerMock_CachedInfo_Call) Run(run func()) *consumerMock_CachedInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *consumerMock_CachedInfo_Call) Return(_a0 *jetstream.ConsumerInfo) *consumerMock_CachedInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *consumerMock_CachedInfo_Call) RunAndReturn(run func() *jetstream.ConsumerInfo) *consumerMock_CachedInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Consume provides a mock function with given fields: handler, opts
func (_m *consumerMock) Consume(handler jetstream.MessageHandler, opts ...jetstream.PullConsumeOpt) (jetstream.ConsumeContext, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Consume")
	}

	var r0 jetstream.ConsumeContext
	var r1 error
	if rf, ok := ret.Get(0).(func(jetstream.MessageHandler, ...jetstream.PullConsumeOpt) (jetstream.ConsumeContext, error)); ok {
		return rf(handler, opts...)
	}
	if rf, ok := ret.Get(0).(func(jetstream.MessageHandler, ...jetstream.PullConsumeOpt) jetstream.ConsumeContext); ok {
		r0 = rf(handler, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jetstream.ConsumeContext)
		}
	}

	if rf, ok := ret.Get(1).(func(jetstream.MessageHandler, ...jetstream.PullConsumeOpt) error); ok {
		r1 = rf(handler, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// consumerMock_Consume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Consume'
type consumerMock_Consume_Call struct {
	*mock.Call
}

// Consume is a helper method to define mock.On call
//   - handler jetstream.MessageHandler
//   - opts ...jetstream.PullConsumeOpt
func (_e *consumerMock_Expecter) Consume(handler interface{}, opts ...interface{}) *consumerMock_Consume_Call {
	return &consumerMock_Consume_Call{Call: _e.mock.On("Consume",
		append([]interface{}{handler}, opts...)...)}
}

func (_c *consumerMock_Consume_Call) Run(run func(handler jetstream.MessageHandler, opts ...jetstream.PullConsumeOpt)) *consumerMock_Consume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]jetstream.PullConsumeOpt, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(jetstream.PullConsumeOpt)
			}
		}
		run(args[0].(jetstream.MessageHandler), variadicArgs...)
	})
	return _c
}

func (_c *consumerMock_Consume_Call) Return(_a0 jetstream.ConsumeContext, _a1 error) *consumerMock_Consume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *consumerMock_Consume_Call) RunAndReturn(run func(jetstream.MessageHandler, ...jetstream.PullConsumeOpt) (jetstream.ConsumeContext, error)) *consumerMock_Consume_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function with given fields: batch, opts
func (_m *consumerMock) Fetch(batch int, opts ...jetstream.FetchOpt) (jetstream.MessageBatch, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, batch)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 jetstream.MessageBatch
	var r1 error
	if rf, ok := ret.Get(0).(func(int, ...jetstream.FetchOpt) (jetstream.MessageBatch, error)); ok {
		return rf(batch, opts...)
	}
	if rf, ok := ret.Get(0).(func(int, ...jetstream.FetchOpt) jetstream.MessageBatch); ok {
		r0 = rf(batch, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jetstream.MessageBatch)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...jetstream.FetchOpt) error); ok {
		r1 = rf(batch, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// consumerMock_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type consumerMock_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - batch int
//   - opts ...jetstream.FetchOpt
func (_e *consumerMock_Expecter) Fetch(batch interface{}, opts ...interface{}) *consumerMock_Fetch_Call {
	return &consumerMock_Fetch_Call{Call: _e.mock.On("Fetch",
		append([]interface{}{batch}, opts...)...)}
}

func (_c *consumerMock_Fetch_Call) Run(run func(batch int, opts ...jetstream.FetchOpt)) *consumerMock_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]jetstream.FetchOpt, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(jetstream.FetchOpt)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *consumerMock_Fetch_Call) Return(_a0 jetstream.MessageBatch, _a1 error) *consumerMock_Fetch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *consumerMock_Fetch_Call) RunAndReturn(run func(int, ...jetstream.FetchOpt) (jetstream.MessageBatch, error)) *consumerMock_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// FetchBytes provides a mock function with given fields: maxBytes, opts
func (_m *consumerMock) FetchBytes(maxBytes int, opts ...jetstream.FetchOpt) (jetstream.MessageBatch, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, maxBytes)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FetchBytes")
	}

	var r0 jetstream.MessageBatch
	var r1 error
	if rf, ok := ret.Get(0).(func(int, ...jetstream.FetchOpt) (jetstream.MessageBatch, error)); ok {
		return rf(maxBytes, opts...)
	}
	if rf, ok := ret.Get(0).(func(int, ...jetstream.FetchOpt) jetstream.MessageBatch); ok {
		r0 = rf(maxBytes, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jetstream.MessageBatch)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...jetstream.FetchOpt) error); ok {
		r1 = rf(maxBytes, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// consumerMock_FetchBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchBytes'
type consumerMock_FetchBytes_Call struct {
	*mock.Call
}

// FetchBytes is a helper method to define mock.On call
//   - maxBytes int
//   - opts ...jetstream.FetchOpt
func (_e *consumerMock_Expecter) FetchBytes(maxBytes interface{}, opts ...interface{}) *consumerMock_FetchBytes_Call {
	return &consumerMock_FetchBytes_Call{Call: _e.mock.On("FetchBytes",
		append([]interface{}{maxBytes}, opts...)...)}
}

func (_c *consumerMock_FetchBytes_Call) Run(run func(maxBytes int, opts ...jetstream.FetchOpt)) *consumerMock_FetchBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]jetstream.FetchOpt, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(jetstream.FetchOpt)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *consumerMock_FetchBytes_Call) Return(_a0 jetstream.MessageBatch, _a1 error) *consumerMock_FetchBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *consumerMock_FetchBytes_Call) RunAndReturn(run func(int, ...jetstream.FetchOpt) (jetstream.MessageBatch, error)) *consumerMock_FetchBytes_Call {
	_c.Call.Return(run)
	return _c
}

// FetchNoWait provides a mock function with given fields: batch
func (_m *consumerMock) FetchNoWait(batch int) (jetstream.MessageBatch, error) {
	ret := _m.Called(batch)

	if len(ret) == 0 {
		panic("no return value specified for FetchNoWait")
	}

	var r0 jetstream.MessageBatch
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (jetstream.MessageBatch, error)); ok {
		return rf(batch)
	}
	if rf, ok := ret.Get(0).(func(int) jetstream.MessageBatch); ok {
		r0 = rf(batch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jetstream.MessageBatch)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(batch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// consumerMock_FetchNoWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchNoWait'
type consumerMock_FetchNoWait_Call struct {
	*mock.Call
}

// FetchNoWait is a helper method to define mock.On call
//   - batch int
func (_e *consumerMock_Expecter) FetchNoWait(batch interface{}) *consumerMock_FetchNoWait_Call {
	return &consumerMock_FetchNoWait_Call{Call: _e.mock.On("FetchNoWait", batch)}
}

func (_c *consumerMock_FetchNoWait_Call) Run(run func(batch int)) *consumerMock_FetchNoWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *consumerMock_FetchNoWait_Call) Return(_a0 jetstream.MessageBatch, _a1 error) *consumerMock_FetchNoWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *consumerMock_FetchNoWait_Call) RunAndReturn(run func(int) (jetstream.MessageBatch, error)) *consumerMock_FetchNoWait_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: _a0
func (_m *consumerMock) Info(_a0 context.Context) (*jetstream.ConsumerInfo, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 *jetstream.ConsumerInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*jetstream.ConsumerInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *jetstream.ConsumerInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jetstream.ConsumerInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// consumerMock_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type consumerMock_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *consumerMock_Expecter) Info(_a0 interface{}) *consumerMock_Info_Call {
	return &consumerMock_Info_Call{Call: _e.mock.On("Info", _a0)}
}

func (_c *consumerMock_Info_Call) Run(run func(_a0 context.Context)) *consumerMock_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *consumerMock_Info_Call) Return(_a0 *jetstream.ConsumerInfo, _a1 error) *consumerMock_Info_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *consumerMock_Info_Call) RunAndReturn(run func(context.Context) (*jetstream.ConsumerInfo, error)) *consumerMock_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Messages provides a mock function with given fields: opts
func (_m *consumerMock) Messages(opts ...jetstream.PullMessagesOpt) (jetstream.MessagesContext, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Messages")
	}

	var r0 jetstream.MessagesContext
	var r1 error
	if rf, ok := ret.Get(0).(func(...jetstream.PullMessagesOpt) (jetstream.MessagesContext, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...jetstream.PullMessagesOpt) jetstream.MessagesContext); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jetstream.MessagesContext)
		}
	}

	if rf, ok := ret.Get(1).(func(...jetstream.PullMessagesOpt) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// consumerMock_Messages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Messages'
type consumerMock_Messages_Call struct {
	*mock.Call
}

// Messages is a helper method to define mock.On call
//   - opts ...jetstream.PullMessagesOpt
func (_e *consumerMock_Expecter) Messages(opts ...interface{}) *consumerMock_Messages_Call {
	return &consumerMock_Messages_Call{Call: _e.mock.On("Messages",
		append([]interface{}{}, opts...)...)}
}

func (_c *consumerMock_Messages_Call) Run(run func(opts ...jetstream.PullMessagesOpt)) *consumerMock_Messages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]jetstream.PullMessagesOpt, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(jetstream.PullMessagesOpt)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *consumerMock_Messages_Call) Return(_a0 jetstream.MessagesContext, _a1 error) *consumerMock_Messages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *consumerMock_Messages_Call) RunAndReturn(run func(...jetstream.PullMessagesOpt) (jetstream.MessagesContext, error)) *consumerMock_Messages_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with given fields: opts
func (_m *consumerMock) Next(opts ...jetstream.FetchOpt) (jetstream.Msg, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 jetstream.Msg
	var r1 error
	if rf, ok := ret.Get(0).(func(...jetstream.FetchOpt) (jetstream.Msg, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...jetstream.FetchOpt) jetstream.Msg); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jetstream.Msg)
		}
	}

	if rf, ok := ret.Get(1).(func(...jetstream.FetchOpt) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// consumerMock_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type consumerMock_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - opts ...jetstream.FetchOpt
func (_e *consumerMock_Expecter) Next(opts ...interface{}) *consumerMock_Next_Call {
	return &consumerMock_Next_Call{Call: _e.mock.On("Next",
		append([]interface{}{}, opts...)...)}
}

func (_c *consumerMock_Next_Call) Run(run func(opts ...jetstream.FetchOpt)) *consumerMock_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]jetstream.FetchOpt, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(jetstream.FetchOpt)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *consumerMock_Next_Call) Return(_a0 jetstream.Msg, _a1 error) *consumerMock_Next_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *consumerMock_Next_Call) RunAndReturn(run func(...jetstream.FetchOpt) (jetstream.Msg, error)) *consumerMock_Next_Call {
	_c.Call.Return(run)
	return _c
}

// newConsumerMock creates a new instance of consumerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newConsumerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *consumerMock {
	mock := &consumerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
