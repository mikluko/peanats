// Code generated by mockery. DO NOT EDIT.

package peanats_test

import (
	context "context"

	peanats "github.com/mikluko/peanats"
	mock "github.com/stretchr/testify/mock"

	textproto "net/textproto"
)

// messageMock is an autogenerated mock type for the Message type
type messageMock struct {
	mock.Mock
}

type messageMock_Expecter struct {
	mock *mock.Mock
}

func (_m *messageMock) EXPECT() *messageMock_Expecter {
	return &messageMock_Expecter{mock: &_m.Mock}
}

// Data provides a mock function with no fields
func (_m *messageMock) Data() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// messageMock_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type messageMock_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *messageMock_Expecter) Data() *messageMock_Data_Call {
	return &messageMock_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *messageMock_Data_Call) Run(run func()) *messageMock_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *messageMock_Data_Call) Return(_a0 []byte) *messageMock_Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *messageMock_Data_Call) RunAndReturn(run func() []byte) *messageMock_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with no fields
func (_m *messageMock) Header() textproto.MIMEHeader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 textproto.MIMEHeader
	if rf, ok := ret.Get(0).(func() textproto.MIMEHeader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(textproto.MIMEHeader)
		}
	}

	return r0
}

// messageMock_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type messageMock_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *messageMock_Expecter) Header() *messageMock_Header_Call {
	return &messageMock_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *messageMock_Header_Call) Run(run func()) *messageMock_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *messageMock_Header_Call) Return(_a0 textproto.MIMEHeader) *messageMock_Header_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *messageMock_Header_Call) RunAndReturn(run func() textproto.MIMEHeader) *messageMock_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Respond provides a mock function with given fields: _a0, _a1, _a2
func (_m *messageMock) Respond(_a0 context.Context, _a1 any, _a2 ...peanats.RespondOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Respond")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, any, ...peanats.RespondOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// messageMock_Respond_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Respond'
type messageMock_Respond_Call struct {
	*mock.Call
}

// Respond is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 any
//   - _a2 ...peanats.RespondOption
func (_e *messageMock_Expecter) Respond(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *messageMock_Respond_Call {
	return &messageMock_Respond_Call{Call: _e.mock.On("Respond",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *messageMock_Respond_Call) Run(run func(_a0 context.Context, _a1 any, _a2 ...peanats.RespondOption)) *messageMock_Respond_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]peanats.RespondOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(peanats.RespondOption)
			}
		}
		run(args[0].(context.Context), args[1].(any), variadicArgs...)
	})
	return _c
}

func (_c *messageMock_Respond_Call) Return(_a0 error) *messageMock_Respond_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *messageMock_Respond_Call) RunAndReturn(run func(context.Context, any, ...peanats.RespondOption) error) *messageMock_Respond_Call {
	_c.Call.Return(run)
	return _c
}

// Subject provides a mock function with no fields
func (_m *messageMock) Subject() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Subject")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// messageMock_Subject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subject'
type messageMock_Subject_Call struct {
	*mock.Call
}

// Subject is a helper method to define mock.On call
func (_e *messageMock_Expecter) Subject() *messageMock_Subject_Call {
	return &messageMock_Subject_Call{Call: _e.mock.On("Subject")}
}

func (_c *messageMock_Subject_Call) Run(run func()) *messageMock_Subject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *messageMock_Subject_Call) Return(_a0 string) *messageMock_Subject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *messageMock_Subject_Call) RunAndReturn(run func() string) *messageMock_Subject_Call {
	_c.Call.Return(run)
	return _c
}

// newMessageMock creates a new instance of messageMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMessageMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *messageMock {
	mock := &messageMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
