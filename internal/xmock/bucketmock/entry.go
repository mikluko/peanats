// Code generated by mockery. DO NOT EDIT.

package bucketmock

import (
	jetstream "github.com/nats-io/nats.go/jetstream"
	mock "github.com/stretchr/testify/mock"

	peanats "github.com/mikluko/peanats"

	time "time"
)

// Entry is an autogenerated mock type for the Entry type
type Entry[T any] struct {
	mock.Mock
}

type Entry_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *Entry[T]) EXPECT() *Entry_Expecter[T] {
	return &Entry_Expecter[T]{mock: &_m.Mock}
}

// Bucket provides a mock function with no fields
func (_m *Entry[T]) Bucket() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bucket")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Entry_Bucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bucket'
type Entry_Bucket_Call[T any] struct {
	*mock.Call
}

// Bucket is a helper method to define mock.On call
func (_e *Entry_Expecter[T]) Bucket() *Entry_Bucket_Call[T] {
	return &Entry_Bucket_Call[T]{Call: _e.mock.On("Bucket")}
}

func (_c *Entry_Bucket_Call[T]) Run(run func()) *Entry_Bucket_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Entry_Bucket_Call[T]) Return(_a0 string) *Entry_Bucket_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Entry_Bucket_Call[T]) RunAndReturn(run func() string) *Entry_Bucket_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Created provides a mock function with no fields
func (_m *Entry[T]) Created() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Created")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Entry_Created_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Created'
type Entry_Created_Call[T any] struct {
	*mock.Call
}

// Created is a helper method to define mock.On call
func (_e *Entry_Expecter[T]) Created() *Entry_Created_Call[T] {
	return &Entry_Created_Call[T]{Call: _e.mock.On("Created")}
}

func (_c *Entry_Created_Call[T]) Run(run func()) *Entry_Created_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Entry_Created_Call[T]) Return(_a0 time.Time) *Entry_Created_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Entry_Created_Call[T]) RunAndReturn(run func() time.Time) *Entry_Created_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Delta provides a mock function with no fields
func (_m *Entry[T]) Delta() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Delta")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Entry_Delta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delta'
type Entry_Delta_Call[T any] struct {
	*mock.Call
}

// Delta is a helper method to define mock.On call
func (_e *Entry_Expecter[T]) Delta() *Entry_Delta_Call[T] {
	return &Entry_Delta_Call[T]{Call: _e.mock.On("Delta")}
}

func (_c *Entry_Delta_Call[T]) Run(run func()) *Entry_Delta_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Entry_Delta_Call[T]) Return(_a0 uint64) *Entry_Delta_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Entry_Delta_Call[T]) RunAndReturn(run func() uint64) *Entry_Delta_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with no fields
func (_m *Entry[T]) Header() peanats.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 peanats.Header
	if rf, ok := ret.Get(0).(func() peanats.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peanats.Header)
		}
	}

	return r0
}

// Entry_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type Entry_Header_Call[T any] struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *Entry_Expecter[T]) Header() *Entry_Header_Call[T] {
	return &Entry_Header_Call[T]{Call: _e.mock.On("Header")}
}

func (_c *Entry_Header_Call[T]) Run(run func()) *Entry_Header_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Entry_Header_Call[T]) Return(_a0 peanats.Header) *Entry_Header_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Entry_Header_Call[T]) RunAndReturn(run func() peanats.Header) *Entry_Header_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Key provides a mock function with no fields
func (_m *Entry[T]) Key() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Entry_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type Entry_Key_Call[T any] struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *Entry_Expecter[T]) Key() *Entry_Key_Call[T] {
	return &Entry_Key_Call[T]{Call: _e.mock.On("Key")}
}

func (_c *Entry_Key_Call[T]) Run(run func()) *Entry_Key_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Entry_Key_Call[T]) Return(_a0 string) *Entry_Key_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Entry_Key_Call[T]) RunAndReturn(run func() string) *Entry_Key_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Operation provides a mock function with no fields
func (_m *Entry[T]) Operation() jetstream.KeyValueOp {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Operation")
	}

	var r0 jetstream.KeyValueOp
	if rf, ok := ret.Get(0).(func() jetstream.KeyValueOp); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(jetstream.KeyValueOp)
	}

	return r0
}

// Entry_Operation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Operation'
type Entry_Operation_Call[T any] struct {
	*mock.Call
}

// Operation is a helper method to define mock.On call
func (_e *Entry_Expecter[T]) Operation() *Entry_Operation_Call[T] {
	return &Entry_Operation_Call[T]{Call: _e.mock.On("Operation")}
}

func (_c *Entry_Operation_Call[T]) Run(run func()) *Entry_Operation_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Entry_Operation_Call[T]) Return(_a0 jetstream.KeyValueOp) *Entry_Operation_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Entry_Operation_Call[T]) RunAndReturn(run func() jetstream.KeyValueOp) *Entry_Operation_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Revision provides a mock function with no fields
func (_m *Entry[T]) Revision() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Revision")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Entry_Revision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revision'
type Entry_Revision_Call[T any] struct {
	*mock.Call
}

// Revision is a helper method to define mock.On call
func (_e *Entry_Expecter[T]) Revision() *Entry_Revision_Call[T] {
	return &Entry_Revision_Call[T]{Call: _e.mock.On("Revision")}
}

func (_c *Entry_Revision_Call[T]) Run(run func()) *Entry_Revision_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Entry_Revision_Call[T]) Return(_a0 uint64) *Entry_Revision_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Entry_Revision_Call[T]) RunAndReturn(run func() uint64) *Entry_Revision_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with no fields
func (_m *Entry[T]) Value() *T {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 *T
	if rf, ok := ret.Get(0).(func() *T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	return r0
}

// Entry_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type Entry_Value_Call[T any] struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *Entry_Expecter[T]) Value() *Entry_Value_Call[T] {
	return &Entry_Value_Call[T]{Call: _e.mock.On("Value")}
}

func (_c *Entry_Value_Call[T]) Run(run func()) *Entry_Value_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Entry_Value_Call[T]) Return(_a0 *T) *Entry_Value_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Entry_Value_Call[T]) RunAndReturn(run func() *T) *Entry_Value_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewEntry creates a new instance of Entry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEntry[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *Entry[T] {
	mock := &Entry[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
