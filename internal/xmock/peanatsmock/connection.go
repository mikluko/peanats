// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package peanatsmock

import (
	"context"

	"github.com/mikluko/peanats"
	mock "github.com/stretchr/testify/mock"
)

// NewConnection creates a new instance of Connection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *Connection {
	mock := &Connection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Connection is an autogenerated mock type for the Connection type
type Connection struct {
	mock.Mock
}

type Connection_Expecter struct {
	mock *mock.Mock
}

func (_m *Connection) EXPECT() *Connection_Expecter {
	return &Connection_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type Connection
func (_mock *Connection) Close() {
	_mock.Called()
	return
}

// Connection_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Connection_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Connection_Expecter) Close() *Connection_Close_Call {
	return &Connection_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Connection_Close_Call) Run(run func()) *Connection_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connection_Close_Call) Return() *Connection_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Connection_Close_Call) RunAndReturn(run func()) *Connection_Close_Call {
	_c.Run(run)
	return _c
}

// Drain provides a mock function for the type Connection
func (_mock *Connection) Drain() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Drain")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_Drain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drain'
type Connection_Drain_Call struct {
	*mock.Call
}

// Drain is a helper method to define mock.On call
func (_e *Connection_Expecter) Drain() *Connection_Drain_Call {
	return &Connection_Drain_Call{Call: _e.mock.On("Drain")}
}

func (_c *Connection_Drain_Call) Run(run func()) *Connection_Drain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connection_Drain_Call) Return(err error) *Connection_Drain_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_Drain_Call) RunAndReturn(run func() error) *Connection_Drain_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function for the type Connection
func (_mock *Connection) Publish(ctx context.Context, msg peanats.Msg) error {
	ret := _mock.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, peanats.Msg) error); ok {
		r0 = returnFunc(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type Connection_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - msg peanats.Msg
func (_e *Connection_Expecter) Publish(ctx interface{}, msg interface{}) *Connection_Publish_Call {
	return &Connection_Publish_Call{Call: _e.mock.On("Publish", ctx, msg)}
}

func (_c *Connection_Publish_Call) Run(run func(ctx context.Context, msg peanats.Msg)) *Connection_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 peanats.Msg
		if args[1] != nil {
			arg1 = args[1].(peanats.Msg)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Connection_Publish_Call) Return(err error) *Connection_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_Publish_Call) RunAndReturn(run func(ctx context.Context, msg peanats.Msg) error) *Connection_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function for the type Connection
func (_mock *Connection) Request(ctx context.Context, msg peanats.Msg) (peanats.Msg, error) {
	ret := _mock.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 peanats.Msg
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, peanats.Msg) (peanats.Msg, error)); ok {
		return returnFunc(ctx, msg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, peanats.Msg) peanats.Msg); ok {
		r0 = returnFunc(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peanats.Msg)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, peanats.Msg) error); ok {
		r1 = returnFunc(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Connection_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type Connection_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - ctx context.Context
//   - msg peanats.Msg
func (_e *Connection_Expecter) Request(ctx interface{}, msg interface{}) *Connection_Request_Call {
	return &Connection_Request_Call{Call: _e.mock.On("Request", ctx, msg)}
}

func (_c *Connection_Request_Call) Run(run func(ctx context.Context, msg peanats.Msg)) *Connection_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 peanats.Msg
		if args[1] != nil {
			arg1 = args[1].(peanats.Msg)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Connection_Request_Call) Return(msg1 peanats.Msg, err error) *Connection_Request_Call {
	_c.Call.Return(msg1, err)
	return _c
}

func (_c *Connection_Request_Call) RunAndReturn(run func(ctx context.Context, msg peanats.Msg) (peanats.Msg, error)) *Connection_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type Connection
func (_mock *Connection) Subscribe(ctx context.Context, subj string, opts ...peanats.SubscribeOption) (peanats.Subscription, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, subj, opts)
	} else {
		tmpRet = _mock.Called(ctx, subj)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 peanats.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...peanats.SubscribeOption) (peanats.Subscription, error)); ok {
		return returnFunc(ctx, subj, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...peanats.SubscribeOption) peanats.Subscription); ok {
		r0 = returnFunc(ctx, subj, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peanats.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...peanats.SubscribeOption) error); ok {
		r1 = returnFunc(ctx, subj, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Connection_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Connection_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - subj string
//   - opts ...peanats.SubscribeOption
func (_e *Connection_Expecter) Subscribe(ctx interface{}, subj interface{}, opts ...interface{}) *Connection_Subscribe_Call {
	return &Connection_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{ctx, subj}, opts...)...)}
}

func (_c *Connection_Subscribe_Call) Run(run func(ctx context.Context, subj string, opts ...peanats.SubscribeOption)) *Connection_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []peanats.SubscribeOption
		var variadicArgs []peanats.SubscribeOption
		if len(args) > 2 {
			variadicArgs = args[2].([]peanats.SubscribeOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Connection_Subscribe_Call) Return(subscription peanats.Subscription, err error) *Connection_Subscribe_Call {
	_c.Call.Return(subscription, err)
	return _c
}

func (_c *Connection_Subscribe_Call) RunAndReturn(run func(ctx context.Context, subj string, opts ...peanats.SubscribeOption) (peanats.Subscription, error)) *Connection_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeChan provides a mock function for the type Connection
func (_mock *Connection) SubscribeChan(ctx context.Context, subj string, ch chan peanats.Msg, opts ...peanats.SubscribeChanOption) (peanats.Unsubscriber, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, subj, ch, opts)
	} else {
		tmpRet = _mock.Called(ctx, subj, ch)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SubscribeChan")
	}

	var r0 peanats.Unsubscriber
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, chan peanats.Msg, ...peanats.SubscribeChanOption) (peanats.Unsubscriber, error)); ok {
		return returnFunc(ctx, subj, ch, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, chan peanats.Msg, ...peanats.SubscribeChanOption) peanats.Unsubscriber); ok {
		r0 = returnFunc(ctx, subj, ch, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peanats.Unsubscriber)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, chan peanats.Msg, ...peanats.SubscribeChanOption) error); ok {
		r1 = returnFunc(ctx, subj, ch, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Connection_SubscribeChan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeChan'
type Connection_SubscribeChan_Call struct {
	*mock.Call
}

// SubscribeChan is a helper method to define mock.On call
//   - ctx context.Context
//   - subj string
//   - ch chan peanats.Msg
//   - opts ...peanats.SubscribeChanOption
func (_e *Connection_Expecter) SubscribeChan(ctx interface{}, subj interface{}, ch interface{}, opts ...interface{}) *Connection_SubscribeChan_Call {
	return &Connection_SubscribeChan_Call{Call: _e.mock.On("SubscribeChan",
		append([]interface{}{ctx, subj, ch}, opts...)...)}
}

func (_c *Connection_SubscribeChan_Call) Run(run func(ctx context.Context, subj string, ch chan peanats.Msg, opts ...peanats.SubscribeChanOption)) *Connection_SubscribeChan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 chan peanats.Msg
		if args[2] != nil {
			arg2 = args[2].(chan peanats.Msg)
		}
		var arg3 []peanats.SubscribeChanOption
		var variadicArgs []peanats.SubscribeChanOption
		if len(args) > 3 {
			variadicArgs = args[3].([]peanats.SubscribeChanOption)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *Connection_SubscribeChan_Call) Return(unsubscriber peanats.Unsubscriber, err error) *Connection_SubscribeChan_Call {
	_c.Call.Return(unsubscriber, err)
	return _c
}

func (_c *Connection_SubscribeChan_Call) RunAndReturn(run func(ctx context.Context, subj string, ch chan peanats.Msg, opts ...peanats.SubscribeChanOption) (peanats.Unsubscriber, error)) *Connection_SubscribeChan_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeHandler provides a mock function for the type Connection
func (_mock *Connection) SubscribeHandler(ctx context.Context, subj string, handler peanats.MsgHandler, opts ...peanats.SubscribeHandlerOption) (peanats.Unsubscriber, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, subj, handler, opts)
	} else {
		tmpRet = _mock.Called(ctx, subj, handler)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SubscribeHandler")
	}

	var r0 peanats.Unsubscriber
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, peanats.MsgHandler, ...peanats.SubscribeHandlerOption) (peanats.Unsubscriber, error)); ok {
		return returnFunc(ctx, subj, handler, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, peanats.MsgHandler, ...peanats.SubscribeHandlerOption) peanats.Unsubscriber); ok {
		r0 = returnFunc(ctx, subj, handler, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peanats.Unsubscriber)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, peanats.MsgHandler, ...peanats.SubscribeHandlerOption) error); ok {
		r1 = returnFunc(ctx, subj, handler, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Connection_SubscribeHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeHandler'
type Connection_SubscribeHandler_Call struct {
	*mock.Call
}

// SubscribeHandler is a helper method to define mock.On call
//   - ctx context.Context
//   - subj string
//   - handler peanats.MsgHandler
//   - opts ...peanats.SubscribeHandlerOption
func (_e *Connection_Expecter) SubscribeHandler(ctx interface{}, subj interface{}, handler interface{}, opts ...interface{}) *Connection_SubscribeHandler_Call {
	return &Connection_SubscribeHandler_Call{Call: _e.mock.On("SubscribeHandler",
		append([]interface{}{ctx, subj, handler}, opts...)...)}
}

func (_c *Connection_SubscribeHandler_Call) Run(run func(ctx context.Context, subj string, handler peanats.MsgHandler, opts ...peanats.SubscribeHandlerOption)) *Connection_SubscribeHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 peanats.MsgHandler
		if args[2] != nil {
			arg2 = args[2].(peanats.MsgHandler)
		}
		var arg3 []peanats.SubscribeHandlerOption
		var variadicArgs []peanats.SubscribeHandlerOption
		if len(args) > 3 {
			variadicArgs = args[3].([]peanats.SubscribeHandlerOption)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *Connection_SubscribeHandler_Call) Return(unsubscriber peanats.Unsubscriber, err error) *Connection_SubscribeHandler_Call {
	_c.Call.Return(unsubscriber, err)
	return _c
}

func (_c *Connection_SubscribeHandler_Call) RunAndReturn(run func(ctx context.Context, subj string, handler peanats.MsgHandler, opts ...peanats.SubscribeHandlerOption) (peanats.Unsubscriber, error)) *Connection_SubscribeHandler_Call {
	_c.Call.Return(run)
	return _c
}
