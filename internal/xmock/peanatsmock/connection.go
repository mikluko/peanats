// Code generated by mockery. DO NOT EDIT.

package peanatsmock

import (
	context "context"

	peanats "github.com/mikluko/peanats"
	mock "github.com/stretchr/testify/mock"
)

// Connection is an autogenerated mock type for the Connection type
type Connection struct {
	mock.Mock
}

type Connection_Expecter struct {
	mock *mock.Mock
}

func (_m *Connection) EXPECT() *Connection_Expecter {
	return &Connection_Expecter{mock: &_m.Mock}
}

// ChanQueueSubscribe provides a mock function with given fields: subj, queue, ch
func (_m *Connection) ChanQueueSubscribe(subj string, queue string, ch chan peanats.Msg) (peanats.Unsubscriber, error) {
	ret := _m.Called(subj, queue, ch)

	if len(ret) == 0 {
		panic("no return value specified for ChanQueueSubscribe")
	}

	var r0 peanats.Unsubscriber
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, chan peanats.Msg) (peanats.Unsubscriber, error)); ok {
		return rf(subj, queue, ch)
	}
	if rf, ok := ret.Get(0).(func(string, string, chan peanats.Msg) peanats.Unsubscriber); ok {
		r0 = rf(subj, queue, ch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peanats.Unsubscriber)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, chan peanats.Msg) error); ok {
		r1 = rf(subj, queue, ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connection_ChanQueueSubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChanQueueSubscribe'
type Connection_ChanQueueSubscribe_Call struct {
	*mock.Call
}

// ChanQueueSubscribe is a helper method to define mock.On call
//   - subj string
//   - queue string
//   - ch chan peanats.Msg
func (_e *Connection_Expecter) ChanQueueSubscribe(subj interface{}, queue interface{}, ch interface{}) *Connection_ChanQueueSubscribe_Call {
	return &Connection_ChanQueueSubscribe_Call{Call: _e.mock.On("ChanQueueSubscribe", subj, queue, ch)}
}

func (_c *Connection_ChanQueueSubscribe_Call) Run(run func(subj string, queue string, ch chan peanats.Msg)) *Connection_ChanQueueSubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(chan peanats.Msg))
	})
	return _c
}

func (_c *Connection_ChanQueueSubscribe_Call) Return(_a0 peanats.Unsubscriber, _a1 error) *Connection_ChanQueueSubscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Connection_ChanQueueSubscribe_Call) RunAndReturn(run func(string, string, chan peanats.Msg) (peanats.Unsubscriber, error)) *Connection_ChanQueueSubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// ChanSubscribe provides a mock function with given fields: subj, ch
func (_m *Connection) ChanSubscribe(subj string, ch chan peanats.Msg) (peanats.Unsubscriber, error) {
	ret := _m.Called(subj, ch)

	if len(ret) == 0 {
		panic("no return value specified for ChanSubscribe")
	}

	var r0 peanats.Unsubscriber
	var r1 error
	if rf, ok := ret.Get(0).(func(string, chan peanats.Msg) (peanats.Unsubscriber, error)); ok {
		return rf(subj, ch)
	}
	if rf, ok := ret.Get(0).(func(string, chan peanats.Msg) peanats.Unsubscriber); ok {
		r0 = rf(subj, ch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peanats.Unsubscriber)
		}
	}

	if rf, ok := ret.Get(1).(func(string, chan peanats.Msg) error); ok {
		r1 = rf(subj, ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connection_ChanSubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChanSubscribe'
type Connection_ChanSubscribe_Call struct {
	*mock.Call
}

// ChanSubscribe is a helper method to define mock.On call
//   - subj string
//   - ch chan peanats.Msg
func (_e *Connection_Expecter) ChanSubscribe(subj interface{}, ch interface{}) *Connection_ChanSubscribe_Call {
	return &Connection_ChanSubscribe_Call{Call: _e.mock.On("ChanSubscribe", subj, ch)}
}

func (_c *Connection_ChanSubscribe_Call) Run(run func(subj string, ch chan peanats.Msg)) *Connection_ChanSubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(chan peanats.Msg))
	})
	return _c
}

func (_c *Connection_ChanSubscribe_Call) Return(_a0 peanats.Unsubscriber, _a1 error) *Connection_ChanSubscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Connection_ChanSubscribe_Call) RunAndReturn(run func(string, chan peanats.Msg) (peanats.Unsubscriber, error)) *Connection_ChanSubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *Connection) Close() {
	_m.Called()
}

// Connection_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Connection_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Connection_Expecter) Close() *Connection_Close_Call {
	return &Connection_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Connection_Close_Call) Run(run func()) *Connection_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connection_Close_Call) Return() *Connection_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Connection_Close_Call) RunAndReturn(run func()) *Connection_Close_Call {
	_c.Run(run)
	return _c
}

// Drain provides a mock function with no fields
func (_m *Connection) Drain() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Drain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connection_Drain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drain'
type Connection_Drain_Call struct {
	*mock.Call
}

// Drain is a helper method to define mock.On call
func (_e *Connection_Expecter) Drain() *Connection_Drain_Call {
	return &Connection_Drain_Call{Call: _e.mock.On("Drain")}
}

func (_c *Connection_Drain_Call) Run(run func()) *Connection_Drain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connection_Drain_Call) Return(_a0 error) *Connection_Drain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connection_Drain_Call) RunAndReturn(run func() error) *Connection_Drain_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, msg
func (_m *Connection) Publish(ctx context.Context, msg peanats.Msg) error {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, peanats.Msg) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connection_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type Connection_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - msg peanats.Msg
func (_e *Connection_Expecter) Publish(ctx interface{}, msg interface{}) *Connection_Publish_Call {
	return &Connection_Publish_Call{Call: _e.mock.On("Publish", ctx, msg)}
}

func (_c *Connection_Publish_Call) Run(run func(ctx context.Context, msg peanats.Msg)) *Connection_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peanats.Msg))
	})
	return _c
}

func (_c *Connection_Publish_Call) Return(_a0 error) *Connection_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connection_Publish_Call) RunAndReturn(run func(context.Context, peanats.Msg) error) *Connection_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// QueueSubscribe provides a mock function with given fields: subj, queue
func (_m *Connection) QueueSubscribe(subj string, queue string) (peanats.Subscription, error) {
	ret := _m.Called(subj, queue)

	if len(ret) == 0 {
		panic("no return value specified for QueueSubscribe")
	}

	var r0 peanats.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (peanats.Subscription, error)); ok {
		return rf(subj, queue)
	}
	if rf, ok := ret.Get(0).(func(string, string) peanats.Subscription); ok {
		r0 = rf(subj, queue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peanats.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(subj, queue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connection_QueueSubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueSubscribe'
type Connection_QueueSubscribe_Call struct {
	*mock.Call
}

// QueueSubscribe is a helper method to define mock.On call
//   - subj string
//   - queue string
func (_e *Connection_Expecter) QueueSubscribe(subj interface{}, queue interface{}) *Connection_QueueSubscribe_Call {
	return &Connection_QueueSubscribe_Call{Call: _e.mock.On("QueueSubscribe", subj, queue)}
}

func (_c *Connection_QueueSubscribe_Call) Run(run func(subj string, queue string)) *Connection_QueueSubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Connection_QueueSubscribe_Call) Return(_a0 peanats.Subscription, _a1 error) *Connection_QueueSubscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Connection_QueueSubscribe_Call) RunAndReturn(run func(string, string) (peanats.Subscription, error)) *Connection_QueueSubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields: ctx, msg
func (_m *Connection) Request(ctx context.Context, msg peanats.Msg) (peanats.Msg, error) {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 peanats.Msg
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, peanats.Msg) (peanats.Msg, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, peanats.Msg) peanats.Msg); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peanats.Msg)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, peanats.Msg) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connection_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type Connection_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - ctx context.Context
//   - msg peanats.Msg
func (_e *Connection_Expecter) Request(ctx interface{}, msg interface{}) *Connection_Request_Call {
	return &Connection_Request_Call{Call: _e.mock.On("Request", ctx, msg)}
}

func (_c *Connection_Request_Call) Run(run func(ctx context.Context, msg peanats.Msg)) *Connection_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peanats.Msg))
	})
	return _c
}

func (_c *Connection_Request_Call) Return(_a0 peanats.Msg, _a1 error) *Connection_Request_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Connection_Request_Call) RunAndReturn(run func(context.Context, peanats.Msg) (peanats.Msg, error)) *Connection_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: subj
func (_m *Connection) Subscribe(subj string) (peanats.Subscription, error) {
	ret := _m.Called(subj)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 peanats.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (peanats.Subscription, error)); ok {
		return rf(subj)
	}
	if rf, ok := ret.Get(0).(func(string) peanats.Subscription); ok {
		r0 = rf(subj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peanats.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connection_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Connection_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - subj string
func (_e *Connection_Expecter) Subscribe(subj interface{}) *Connection_Subscribe_Call {
	return &Connection_Subscribe_Call{Call: _e.mock.On("Subscribe", subj)}
}

func (_c *Connection_Subscribe_Call) Run(run func(subj string)) *Connection_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Connection_Subscribe_Call) Return(_a0 peanats.Subscription, _a1 error) *Connection_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Connection_Subscribe_Call) RunAndReturn(run func(string) (peanats.Subscription, error)) *Connection_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnection creates a new instance of Connection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *Connection {
	mock := &Connection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
