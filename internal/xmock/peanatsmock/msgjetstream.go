// Code generated by mockery. DO NOT EDIT.

package peanatsmock

import (
	context "context"

	jetstream "github.com/nats-io/nats.go/jetstream"
	mock "github.com/stretchr/testify/mock"

	peanats "github.com/mikluko/peanats"
)

// MsgJetstream is an autogenerated mock type for the MsgJetstream type
type MsgJetstream struct {
	mock.Mock
}

type MsgJetstream_Expecter struct {
	mock *mock.Mock
}

func (_m *MsgJetstream) EXPECT() *MsgJetstream_Expecter {
	return &MsgJetstream_Expecter{mock: &_m.Mock}
}

// Ack provides a mock function with given fields: _a0
func (_m *MsgJetstream) Ack(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Ack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MsgJetstream_Ack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ack'
type MsgJetstream_Ack_Call struct {
	*mock.Call
}

// Ack is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MsgJetstream_Expecter) Ack(_a0 interface{}) *MsgJetstream_Ack_Call {
	return &MsgJetstream_Ack_Call{Call: _e.mock.On("Ack", _a0)}
}

func (_c *MsgJetstream_Ack_Call) Run(run func(_a0 context.Context)) *MsgJetstream_Ack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MsgJetstream_Ack_Call) Return(_a0 error) *MsgJetstream_Ack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgJetstream_Ack_Call) RunAndReturn(run func(context.Context) error) *MsgJetstream_Ack_Call {
	_c.Call.Return(run)
	return _c
}

// Data provides a mock function with no fields
func (_m *MsgJetstream) Data() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MsgJetstream_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type MsgJetstream_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *MsgJetstream_Expecter) Data() *MsgJetstream_Data_Call {
	return &MsgJetstream_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *MsgJetstream_Data_Call) Run(run func()) *MsgJetstream_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MsgJetstream_Data_Call) Return(_a0 []byte) *MsgJetstream_Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgJetstream_Data_Call) RunAndReturn(run func() []byte) *MsgJetstream_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with no fields
func (_m *MsgJetstream) Header() peanats.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 peanats.Header
	if rf, ok := ret.Get(0).(func() peanats.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peanats.Header)
		}
	}

	return r0
}

// MsgJetstream_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type MsgJetstream_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *MsgJetstream_Expecter) Header() *MsgJetstream_Header_Call {
	return &MsgJetstream_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *MsgJetstream_Header_Call) Run(run func()) *MsgJetstream_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MsgJetstream_Header_Call) Return(_a0 peanats.Header) *MsgJetstream_Header_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgJetstream_Header_Call) RunAndReturn(run func() peanats.Header) *MsgJetstream_Header_Call {
	_c.Call.Return(run)
	return _c
}

// InProgress provides a mock function with given fields: _a0
func (_m *MsgJetstream) InProgress(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InProgress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MsgJetstream_InProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InProgress'
type MsgJetstream_InProgress_Call struct {
	*mock.Call
}

// InProgress is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MsgJetstream_Expecter) InProgress(_a0 interface{}) *MsgJetstream_InProgress_Call {
	return &MsgJetstream_InProgress_Call{Call: _e.mock.On("InProgress", _a0)}
}

func (_c *MsgJetstream_InProgress_Call) Run(run func(_a0 context.Context)) *MsgJetstream_InProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MsgJetstream_InProgress_Call) Return(_a0 error) *MsgJetstream_InProgress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgJetstream_InProgress_Call) RunAndReturn(run func(context.Context) error) *MsgJetstream_InProgress_Call {
	_c.Call.Return(run)
	return _c
}

// Metadata provides a mock function with no fields
func (_m *MsgJetstream) Metadata() (*jetstream.MsgMetadata, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 *jetstream.MsgMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func() (*jetstream.MsgMetadata, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *jetstream.MsgMetadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jetstream.MsgMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MsgJetstream_Metadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metadata'
type MsgJetstream_Metadata_Call struct {
	*mock.Call
}

// Metadata is a helper method to define mock.On call
func (_e *MsgJetstream_Expecter) Metadata() *MsgJetstream_Metadata_Call {
	return &MsgJetstream_Metadata_Call{Call: _e.mock.On("Metadata")}
}

func (_c *MsgJetstream_Metadata_Call) Run(run func()) *MsgJetstream_Metadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MsgJetstream_Metadata_Call) Return(_a0 *jetstream.MsgMetadata, _a1 error) *MsgJetstream_Metadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MsgJetstream_Metadata_Call) RunAndReturn(run func() (*jetstream.MsgMetadata, error)) *MsgJetstream_Metadata_Call {
	_c.Call.Return(run)
	return _c
}

// Nak provides a mock function with given fields: _a0
func (_m *MsgJetstream) Nak(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Nak")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MsgJetstream_Nak_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Nak'
type MsgJetstream_Nak_Call struct {
	*mock.Call
}

// Nak is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MsgJetstream_Expecter) Nak(_a0 interface{}) *MsgJetstream_Nak_Call {
	return &MsgJetstream_Nak_Call{Call: _e.mock.On("Nak", _a0)}
}

func (_c *MsgJetstream_Nak_Call) Run(run func(_a0 context.Context)) *MsgJetstream_Nak_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MsgJetstream_Nak_Call) Return(_a0 error) *MsgJetstream_Nak_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgJetstream_Nak_Call) RunAndReturn(run func(context.Context) error) *MsgJetstream_Nak_Call {
	_c.Call.Return(run)
	return _c
}

// Subject provides a mock function with no fields
func (_m *MsgJetstream) Subject() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Subject")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MsgJetstream_Subject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subject'
type MsgJetstream_Subject_Call struct {
	*mock.Call
}

// Subject is a helper method to define mock.On call
func (_e *MsgJetstream_Expecter) Subject() *MsgJetstream_Subject_Call {
	return &MsgJetstream_Subject_Call{Call: _e.mock.On("Subject")}
}

func (_c *MsgJetstream_Subject_Call) Run(run func()) *MsgJetstream_Subject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MsgJetstream_Subject_Call) Return(_a0 string) *MsgJetstream_Subject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgJetstream_Subject_Call) RunAndReturn(run func() string) *MsgJetstream_Subject_Call {
	_c.Call.Return(run)
	return _c
}

// Term provides a mock function with given fields: _a0
func (_m *MsgJetstream) Term(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Term")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MsgJetstream_Term_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Term'
type MsgJetstream_Term_Call struct {
	*mock.Call
}

// Term is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MsgJetstream_Expecter) Term(_a0 interface{}) *MsgJetstream_Term_Call {
	return &MsgJetstream_Term_Call{Call: _e.mock.On("Term", _a0)}
}

func (_c *MsgJetstream_Term_Call) Run(run func(_a0 context.Context)) *MsgJetstream_Term_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MsgJetstream_Term_Call) Return(_a0 error) *MsgJetstream_Term_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgJetstream_Term_Call) RunAndReturn(run func(context.Context) error) *MsgJetstream_Term_Call {
	_c.Call.Return(run)
	return _c
}

// TermWithReason provides a mock function with given fields: _a0, _a1
func (_m *MsgJetstream) TermWithReason(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TermWithReason")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MsgJetstream_TermWithReason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TermWithReason'
type MsgJetstream_TermWithReason_Call struct {
	*mock.Call
}

// TermWithReason is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MsgJetstream_Expecter) TermWithReason(_a0 interface{}, _a1 interface{}) *MsgJetstream_TermWithReason_Call {
	return &MsgJetstream_TermWithReason_Call{Call: _e.mock.On("TermWithReason", _a0, _a1)}
}

func (_c *MsgJetstream_TermWithReason_Call) Run(run func(_a0 context.Context, _a1 string)) *MsgJetstream_TermWithReason_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MsgJetstream_TermWithReason_Call) Return(_a0 error) *MsgJetstream_TermWithReason_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgJetstream_TermWithReason_Call) RunAndReturn(run func(context.Context, string) error) *MsgJetstream_TermWithReason_Call {
	_c.Call.Return(run)
	return _c
}

// NewMsgJetstream creates a new instance of MsgJetstream. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMsgJetstream(t interface {
	mock.TestingT
	Cleanup(func())
}) *MsgJetstream {
	mock := &MsgJetstream{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
