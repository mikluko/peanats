// Code generated by mockery. DO NOT EDIT.

package peanatsmock

import (
	peanats "github.com/mikluko/peanats"
	mock "github.com/stretchr/testify/mock"
)

// Msg is an autogenerated mock type for the Msg type
type Msg struct {
	mock.Mock
}

type Msg_Expecter struct {
	mock *mock.Mock
}

func (_m *Msg) EXPECT() *Msg_Expecter {
	return &Msg_Expecter{mock: &_m.Mock}
}

// Data provides a mock function with no fields
func (_m *Msg) Data() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Msg_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type Msg_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *Msg_Expecter) Data() *Msg_Data_Call {
	return &Msg_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *Msg_Data_Call) Run(run func()) *Msg_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Msg_Data_Call) Return(_a0 []byte) *Msg_Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Msg_Data_Call) RunAndReturn(run func() []byte) *Msg_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with no fields
func (_m *Msg) Header() peanats.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 peanats.Header
	if rf, ok := ret.Get(0).(func() peanats.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peanats.Header)
		}
	}

	return r0
}

// Msg_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type Msg_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *Msg_Expecter) Header() *Msg_Header_Call {
	return &Msg_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *Msg_Header_Call) Run(run func()) *Msg_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Msg_Header_Call) Return(_a0 peanats.Header) *Msg_Header_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Msg_Header_Call) RunAndReturn(run func() peanats.Header) *Msg_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Subject provides a mock function with no fields
func (_m *Msg) Subject() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Subject")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Msg_Subject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subject'
type Msg_Subject_Call struct {
	*mock.Call
}

// Subject is a helper method to define mock.On call
func (_e *Msg_Expecter) Subject() *Msg_Subject_Call {
	return &Msg_Subject_Call{Call: _e.mock.On("Subject")}
}

func (_c *Msg_Subject_Call) Run(run func()) *Msg_Subject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Msg_Subject_Call) Return(_a0 string) *Msg_Subject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Msg_Subject_Call) RunAndReturn(run func() string) *Msg_Subject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMsg creates a new instance of Msg. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMsg(t interface {
	mock.TestingT
	Cleanup(func())
}) *Msg {
	mock := &Msg{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
