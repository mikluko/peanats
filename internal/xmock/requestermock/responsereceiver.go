// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package requestermock

import (
	"context"

	"github.com/mikluko/peanats/requester"
	mock "github.com/stretchr/testify/mock"
)

// NewResponseReceiver creates a new instance of ResponseReceiver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResponseReceiver[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *ResponseReceiver[T] {
	mock := &ResponseReceiver[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ResponseReceiver is an autogenerated mock type for the ResponseReceiver type
type ResponseReceiver[T any] struct {
	mock.Mock
}

type ResponseReceiver_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *ResponseReceiver[T]) EXPECT() *ResponseReceiver_Expecter[T] {
	return &ResponseReceiver_Expecter[T]{mock: &_m.Mock}
}

// Next provides a mock function for the type ResponseReceiver
func (_mock *ResponseReceiver[T]) Next(context1 context.Context) (requester.Response[T], error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 requester.Response[T]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (requester.Response[T], error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) requester.Response[T]); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(requester.Response[T])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResponseReceiver_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type ResponseReceiver_Next_Call[T any] struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - context1 context.Context
func (_e *ResponseReceiver_Expecter[T]) Next(context1 interface{}) *ResponseReceiver_Next_Call[T] {
	return &ResponseReceiver_Next_Call[T]{Call: _e.mock.On("Next", context1)}
}

func (_c *ResponseReceiver_Next_Call[T]) Run(run func(context1 context.Context)) *ResponseReceiver_Next_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ResponseReceiver_Next_Call[T]) Return(response requester.Response[T], err error) *ResponseReceiver_Next_Call[T] {
	_c.Call.Return(response, err)
	return _c
}

func (_c *ResponseReceiver_Next_Call[T]) RunAndReturn(run func(context1 context.Context) (requester.Response[T], error)) *ResponseReceiver_Next_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type ResponseReceiver
func (_mock *ResponseReceiver[T]) Stop() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ResponseReceiver_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type ResponseReceiver_Stop_Call[T any] struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *ResponseReceiver_Expecter[T]) Stop() *ResponseReceiver_Stop_Call[T] {
	return &ResponseReceiver_Stop_Call[T]{Call: _e.mock.On("Stop")}
}

func (_c *ResponseReceiver_Stop_Call[T]) Run(run func()) *ResponseReceiver_Stop_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResponseReceiver_Stop_Call[T]) Return(err error) *ResponseReceiver_Stop_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *ResponseReceiver_Stop_Call[T]) RunAndReturn(run func() error) *ResponseReceiver_Stop_Call[T] {
	_c.Call.Return(run)
	return _c
}
