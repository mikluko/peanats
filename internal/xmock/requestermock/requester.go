// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package requestermock

import (
	"context"

	"github.com/mikluko/peanats/requester"
	mock "github.com/stretchr/testify/mock"
)

// NewRequester creates a new instance of Requester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequester[RQ any, RS any](t interface {
	mock.TestingT
	Cleanup(func())
}) *Requester[RQ, RS] {
	mock := &Requester[RQ, RS]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Requester is an autogenerated mock type for the Requester type
type Requester[RQ any, RS any] struct {
	mock.Mock
}

type Requester_Expecter[RQ any, RS any] struct {
	mock *mock.Mock
}

func (_m *Requester[RQ, RS]) EXPECT() *Requester_Expecter[RQ, RS] {
	return &Requester_Expecter[RQ, RS]{mock: &_m.Mock}
}

// Request provides a mock function for the type Requester
func (_mock *Requester[RQ, RS]) Request(context1 context.Context, s string, v *RQ, requestOptions ...requester.RequestOption) (requester.Response[RS], error) {
	var tmpRet mock.Arguments
	if len(requestOptions) > 0 {
		tmpRet = _mock.Called(context1, s, v, requestOptions)
	} else {
		tmpRet = _mock.Called(context1, s, v)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 requester.Response[RS]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *RQ, ...requester.RequestOption) (requester.Response[RS], error)); ok {
		return returnFunc(context1, s, v, requestOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *RQ, ...requester.RequestOption) requester.Response[RS]); ok {
		r0 = returnFunc(context1, s, v, requestOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(requester.Response[RS])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *RQ, ...requester.RequestOption) error); ok {
		r1 = returnFunc(context1, s, v, requestOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Requester_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type Requester_Request_Call[RQ any, RS any] struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - v *RQ
//   - requestOptions ...requester.RequestOption
func (_e *Requester_Expecter[RQ, RS]) Request(context1 interface{}, s interface{}, v interface{}, requestOptions ...interface{}) *Requester_Request_Call[RQ, RS] {
	return &Requester_Request_Call[RQ, RS]{Call: _e.mock.On("Request",
		append([]interface{}{context1, s, v}, requestOptions...)...)}
}

func (_c *Requester_Request_Call[RQ, RS]) Run(run func(context1 context.Context, s string, v *RQ, requestOptions ...requester.RequestOption)) *Requester_Request_Call[RQ, RS] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *RQ
		if args[2] != nil {
			arg2 = args[2].(*RQ)
		}
		var arg3 []requester.RequestOption
		var variadicArgs []requester.RequestOption
		if len(args) > 3 {
			variadicArgs = args[3].([]requester.RequestOption)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *Requester_Request_Call[RQ, RS]) Return(response requester.Response[RS], err error) *Requester_Request_Call[RQ, RS] {
	_c.Call.Return(response, err)
	return _c
}

func (_c *Requester_Request_Call[RQ, RS]) RunAndReturn(run func(context1 context.Context, s string, v *RQ, requestOptions ...requester.RequestOption) (requester.Response[RS], error)) *Requester_Request_Call[RQ, RS] {
	_c.Call.Return(run)
	return _c
}

// ResponseReceiver provides a mock function for the type Requester
func (_mock *Requester[RQ, RS]) ResponseReceiver(context1 context.Context, s string, v *RQ, responseReceiverOptions ...requester.ResponseReceiverOption) (requester.ResponseReceiver[RS], error) {
	var tmpRet mock.Arguments
	if len(responseReceiverOptions) > 0 {
		tmpRet = _mock.Called(context1, s, v, responseReceiverOptions)
	} else {
		tmpRet = _mock.Called(context1, s, v)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ResponseReceiver")
	}

	var r0 requester.ResponseReceiver[RS]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *RQ, ...requester.ResponseReceiverOption) (requester.ResponseReceiver[RS], error)); ok {
		return returnFunc(context1, s, v, responseReceiverOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *RQ, ...requester.ResponseReceiverOption) requester.ResponseReceiver[RS]); ok {
		r0 = returnFunc(context1, s, v, responseReceiverOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(requester.ResponseReceiver[RS])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *RQ, ...requester.ResponseReceiverOption) error); ok {
		r1 = returnFunc(context1, s, v, responseReceiverOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Requester_ResponseReceiver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResponseReceiver'
type Requester_ResponseReceiver_Call[RQ any, RS any] struct {
	*mock.Call
}

// ResponseReceiver is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - v *RQ
//   - responseReceiverOptions ...requester.ResponseReceiverOption
func (_e *Requester_Expecter[RQ, RS]) ResponseReceiver(context1 interface{}, s interface{}, v interface{}, responseReceiverOptions ...interface{}) *Requester_ResponseReceiver_Call[RQ, RS] {
	return &Requester_ResponseReceiver_Call[RQ, RS]{Call: _e.mock.On("ResponseReceiver",
		append([]interface{}{context1, s, v}, responseReceiverOptions...)...)}
}

func (_c *Requester_ResponseReceiver_Call[RQ, RS]) Run(run func(context1 context.Context, s string, v *RQ, responseReceiverOptions ...requester.ResponseReceiverOption)) *Requester_ResponseReceiver_Call[RQ, RS] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *RQ
		if args[2] != nil {
			arg2 = args[2].(*RQ)
		}
		var arg3 []requester.ResponseReceiverOption
		var variadicArgs []requester.ResponseReceiverOption
		if len(args) > 3 {
			variadicArgs = args[3].([]requester.ResponseReceiverOption)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *Requester_ResponseReceiver_Call[RQ, RS]) Return(responseReceiver requester.ResponseReceiver[RS], err error) *Requester_ResponseReceiver_Call[RQ, RS] {
	_c.Call.Return(responseReceiver, err)
	return _c
}

func (_c *Requester_ResponseReceiver_Call[RQ, RS]) RunAndReturn(run func(context1 context.Context, s string, v *RQ, responseReceiverOptions ...requester.ResponseReceiverOption) (requester.ResponseReceiver[RS], error)) *Requester_ResponseReceiver_Call[RQ, RS] {
	_c.Call.Return(run)
	return _c
}
