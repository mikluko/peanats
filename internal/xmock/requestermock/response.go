// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package requestermock

import (
	"github.com/mikluko/peanats"
	mock "github.com/stretchr/testify/mock"
)

// NewResponse creates a new instance of Response. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResponse[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *Response[T] {
	mock := &Response[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Response is an autogenerated mock type for the Response type
type Response[T any] struct {
	mock.Mock
}

type Response_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *Response[T]) EXPECT() *Response_Expecter[T] {
	return &Response_Expecter[T]{mock: &_m.Mock}
}

// Header provides a mock function for the type Response
func (_mock *Response[T]) Header() peanats.Header {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 peanats.Header
	if returnFunc, ok := ret.Get(0).(func() peanats.Header); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peanats.Header)
		}
	}
	return r0
}

// Response_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type Response_Header_Call[T any] struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *Response_Expecter[T]) Header() *Response_Header_Call[T] {
	return &Response_Header_Call[T]{Call: _e.mock.On("Header")}
}

func (_c *Response_Header_Call[T]) Run(run func()) *Response_Header_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Header_Call[T]) Return(v peanats.Header) *Response_Header_Call[T] {
	_c.Call.Return(v)
	return _c
}

func (_c *Response_Header_Call[T]) RunAndReturn(run func() peanats.Header) *Response_Header_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function for the type Response
func (_mock *Response[T]) Value() *T {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 *T
	if returnFunc, ok := ret.Get(0).(func() *T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}
	return r0
}

// Response_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type Response_Value_Call[T any] struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *Response_Expecter[T]) Value() *Response_Value_Call[T] {
	return &Response_Value_Call[T]{Call: _e.mock.On("Value")}
}

func (_c *Response_Value_Call[T]) Run(run func()) *Response_Value_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Response_Value_Call[T]) Return(v *T) *Response_Value_Call[T] {
	_c.Call.Return(v)
	return _c
}

func (_c *Response_Value_Call[T]) RunAndReturn(run func() *T) *Response_Value_Call[T] {
	_c.Call.Return(run)
	return _c
}
