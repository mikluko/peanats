// Code generated by mockery. DO NOT EDIT.

package peanats_test

import (
	jetstream "github.com/nats-io/nats.go/jetstream"
	mock "github.com/stretchr/testify/mock"
)

// keyWatcherMock is an autogenerated mock type for the KeyWatcher type
type keyWatcherMock struct {
	mock.Mock
}

type keyWatcherMock_Expecter struct {
	mock *mock.Mock
}

func (_m *keyWatcherMock) EXPECT() *keyWatcherMock_Expecter {
	return &keyWatcherMock_Expecter{mock: &_m.Mock}
}

// Stop provides a mock function with no fields
func (_m *keyWatcherMock) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// keyWatcherMock_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type keyWatcherMock_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *keyWatcherMock_Expecter) Stop() *keyWatcherMock_Stop_Call {
	return &keyWatcherMock_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *keyWatcherMock_Stop_Call) Run(run func()) *keyWatcherMock_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *keyWatcherMock_Stop_Call) Return(_a0 error) *keyWatcherMock_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *keyWatcherMock_Stop_Call) RunAndReturn(run func() error) *keyWatcherMock_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Updates provides a mock function with no fields
func (_m *keyWatcherMock) Updates() <-chan jetstream.KeyValueEntry {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Updates")
	}

	var r0 <-chan jetstream.KeyValueEntry
	if rf, ok := ret.Get(0).(func() <-chan jetstream.KeyValueEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan jetstream.KeyValueEntry)
		}
	}

	return r0
}

// keyWatcherMock_Updates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Updates'
type keyWatcherMock_Updates_Call struct {
	*mock.Call
}

// Updates is a helper method to define mock.On call
func (_e *keyWatcherMock_Expecter) Updates() *keyWatcherMock_Updates_Call {
	return &keyWatcherMock_Updates_Call{Call: _e.mock.On("Updates")}
}

func (_c *keyWatcherMock_Updates_Call) Run(run func()) *keyWatcherMock_Updates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *keyWatcherMock_Updates_Call) Return(_a0 <-chan jetstream.KeyValueEntry) *keyWatcherMock_Updates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *keyWatcherMock_Updates_Call) RunAndReturn(run func() <-chan jetstream.KeyValueEntry) *keyWatcherMock_Updates_Call {
	_c.Call.Return(run)
	return _c
}

// newKeyWatcherMock creates a new instance of keyWatcherMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newKeyWatcherMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *keyWatcherMock {
	mock := &keyWatcherMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
