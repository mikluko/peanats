// Code generated by mockery. DO NOT EDIT.

package peanats_test

import (
	context "context"

	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"
)

// natsRequesterMock is an autogenerated mock type for the natsRequester type
type natsRequesterMock struct {
	mock.Mock
}

type natsRequesterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *natsRequesterMock) EXPECT() *natsRequesterMock_Expecter {
	return &natsRequesterMock_Expecter{mock: &_m.Mock}
}

// RequestMsgWithContext provides a mock function with given fields: _a0, _a1
func (_m *natsRequesterMock) RequestMsgWithContext(_a0 context.Context, _a1 *nats.Msg) (*nats.Msg, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RequestMsgWithContext")
	}

	var r0 *nats.Msg
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nats.Msg) (*nats.Msg, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nats.Msg) *nats.Msg); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Msg)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nats.Msg) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// natsRequesterMock_RequestMsgWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestMsgWithContext'
type natsRequesterMock_RequestMsgWithContext_Call struct {
	*mock.Call
}

// RequestMsgWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *nats.Msg
func (_e *natsRequesterMock_Expecter) RequestMsgWithContext(_a0 interface{}, _a1 interface{}) *natsRequesterMock_RequestMsgWithContext_Call {
	return &natsRequesterMock_RequestMsgWithContext_Call{Call: _e.mock.On("RequestMsgWithContext", _a0, _a1)}
}

func (_c *natsRequesterMock_RequestMsgWithContext_Call) Run(run func(_a0 context.Context, _a1 *nats.Msg)) *natsRequesterMock_RequestMsgWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*nats.Msg))
	})
	return _c
}

func (_c *natsRequesterMock_RequestMsgWithContext_Call) Return(_a0 *nats.Msg, _a1 error) *natsRequesterMock_RequestMsgWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *natsRequesterMock_RequestMsgWithContext_Call) RunAndReturn(run func(context.Context, *nats.Msg) (*nats.Msg, error)) *natsRequesterMock_RequestMsgWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// newNatsRequesterMock creates a new instance of natsRequesterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newNatsRequesterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *natsRequesterMock {
	mock := &natsRequesterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
